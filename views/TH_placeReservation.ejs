<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://kit.fontawesome.com/1a34eeff0c.js"crossorigin="anonymous"></script>
    <!-- <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous" ></script> -->
    <!-- 폰트 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=ADLaM+Display&family=Jua&family=Monoton&display=swap" rel="stylesheet">
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 부트스트랩cdn -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"rel="stylesheet"integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx"crossorigin="anonymous"/>
    
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"rel="stylesheet"integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx"crossorigin="anonymous"/>
    <link rel="stylesheet" href="/public/css/classMain2.css" />
  <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script> -->

    <style>
     .main {
        display: flex;
        flex-direction: row;
        height: 100%;
      }
      .right-bar {
        /* position: absolute;
        display: flex;
        flex-direction: column; */
        /* width: 200px; */
        border-style: solid;
        border-radius: 5px;
        border-color: white;
        border-width: 0.4px;
        padding: 10px;
        /* right: 10px; */
        margin-left: 1160px;
        margin-top: 430px;
        position: absolute;
        display: flex;
        flex-direction: column;
      }
      .square {
        width: 60px;
        height: 60px;
        background-color: #A7ECEE;
        border-radius: 10px;
        font-size: 15px;
      }
      .room {
        width: 100%;
        background-color: #FFE5B8;
        border-radius: 0 0 20px 20px;
      }
      .btn-custom{
        border-style: none;
        border-radius: 5px;
        background-color: white;
        padding: 6px;
        margin: 5px;
      }
      .chosen {
        background-color: #4993FA;
      }
      .button-place{
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
      }
      #data-list2{
        border-radius: 5px;
        margin: 10px;
        border-style: none;
      }
      .resetter{
        display : none;
      }
    </style>
  </head>
  <body>


    <div class="main_container">
      <div class="head1 d-flex justify-content-between">
        <div class="head1-logo "><img src="/public/default/logo-removebg.png" style="width: 30px; height: 30px;"></img><span>CLAVI</span></div>
        <i class="head1-profile fa-solid fa-user " data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" style="color: white; "></i>
          <!-- <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Toggle right offcanvas</button> -->
      </div>
      <ul class="nav nav-tabs dropup">
          <li class="nav-item">
            <a class="nav-link " aria-current="page" href="/board"><i class="fa-solid fa-chalkboard-user"></i>  BOARD</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown active dropdown-toggle" data-bs-toggle="dropdown" role="button" aria-expanded="false"><i class="fa-solid fa-chair"></i>  SEAT</a>
            <ul class="dropdown-menu" style="min-width: fit-content;
            width: 120px; ">
              <li><a class="dropdown-item" href="/desk/reservation">자리 예약</a></li>
              <li><a class="dropdown-item" href="/desk/generator">자리 배치</a></li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/chat"><i class="fa-solid fa-comments"></i>  MESSAGE</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/noteManager"><i class="fa-solid fa-book"></i>  NOTE</a>
          </li>
        </ul>
  
        <div class="dropdown nav-drop">
          <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            MENU
          </button>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" type="button" href="/board">BOARD</a></li>
            <li><a class="dropdown-item" type="button" href="/desk/reservation"  >SEAT</a></li>
            <li><a class="dropdown-item" type="button" href="/chat" >MESSAGE</a>
            </li>
            <li><a class="dropdown-item" type="button" href="/noteManager" >NOTE</a></li>
          </ul>
        </div>

      <div class="main_content">
        <div class="main">
          <div class="room"></div>
          <div class="right-bar">
            <div class="button-place">
              <button class="btn-custom" onclick="Unoccupate()">예약취소</button>
              <button class="btn-custom resetter" onclick="reset()">리셋</button>
              <button class="btn-custom resetter" onclick="placeReset()">예약리셋</button>
            </div>
            <select id="data-list2" onchange="positionChange()"></select>
          </div>
          
        </div>
      </div>
    </div>
    <div class="offcanvas offcanvas-end " tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
        <div class="offcanvas-header">
          <h5 class="offcanvas-title" id="offcanvasRightLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body ">
          <div class="profile_img" id="profile_img"></div>
          <br />
          <div class="offcanvas-menu ">
            <div class="my_page btn" >마이페이지</div>
            <div class="planner btn">플래너</div>
            
            <a class="btn" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              클래스 변경하기
            </a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#">KDT 9기</a></li>
              <li><a class="dropdown-item" href="#">두환이네</a></li>
              <li><a class="dropdown-item" href="#">KDT 1기</a></li>
            </ul>
            <div class="logout btn" onclick="logout()">로그아웃</div>
          </div>
          
        </div>
      </div>



    <!-- <div class="main">
      <div class="room"></div>
      <div class="right-bar">
        <button style="height: 50px" onclick="Unoccupate()">예약취소</button>
        <button style="height: 50px" onclick="reset()">리셋</button>
        <a href="/desk" onclick="return confirm('페이지를 벗어나시겠습니까?');"
          >돌아가기</a
        >
      </div>
      <ul></ul>
    </div> -->
    <script src="/public/js/header.js"></script>
    <script>
      $(".right-bar").draggable()
      let whoAmI = '<%= name %>';
      let myType = '<%= userType %>';
      console.log(myType);
      let nowMap = '';
      const socket = io();

      if (myType == 'leader') {
        let showButton = document.querySelectorAll(".resetter")
        for(let i = 0; i < showButton.length; i++){
          showButton[i].style.display = "block"
        }
        axios({
          method: 'GET',
          url: '/desk/get_generator',
        }).then((res) => {
          socket.emit('basicSetting', res.data);
          console.log('data', res.data);
          let select = document.querySelector("#data-list2")
          select.innerHTML = "";
          let defaultOne = document.createElement('option');
          defaultOne.innerText = "데이터 선택"
          select.appendChild(defaultOne);
          const { desk: data } = res.data;
          for (let i = 0; i < data.length; i++) {
              let op = document.createElement('option');
              op.classList.add(`${data[i].name}`);
              op.innerHTML = `<p class="${data[i].name}">${data[i].name}</p>`;
              // op.oncontextmenu = deleteChair;
              op.style.cursor = 'pointer';
              console.log(op)
              select.appendChild(op);
            }
        });
      }
      else{
        document.querySelector("#data-list2").style.display = "none"
      }

      const socketOn = (i) => {
        socket.emit('confirmed', data[i].name);
      }

      const positionChange = () => {
        let which = event.currentTarget
        console.log(which.options[which.selectedIndex])
        if(which.options[which.selectedIndex].innerText !== "데이터 선택"){
          socket.emit('confirmed', which.options[which.selectedIndex].children[0].innerText);
        }
      }

      const chairGenerator = (dataBase, li) => {
        console.log(dataBase);
        let num = 0;
        let specify = li;
        for (let i = 0; i < dataBase.length; i++) {
          if (dataBase[i].name == specify) {
            for (let j = 0; j < +dataBase[i].num; j++) {
              let square = document.createElement('div');
              let numbering = document.createElement('p');

              //책상번호 만들어주기
              num = dataBase[i].position[j].who.split('num')[1];
              numbering.innerText = num;

              //책상별 클래스 부여
              square.classList.add('square', dataBase[i].position[j].who);
              for (let a = 0; a < dataBase[i].chosen.length; a++) {
                if (
                  dataBase[i].chosen[a].which == dataBase[i].position[j].who
                ) {
                  square.classList.add('chosen');
                  numbering.innerText = dataBase[i].chosen[a].owner;
                }
              }
              numbering.style.marginTop = '5px';
              numbering.style.marginLeft = '5px';
              square.appendChild(numbering);

              //포지션 부여
              square.style.cssText = `
                    top: ${dataBase[i].position[j].top}px;
                    left: ${dataBase[i].position[j].left}px;
                    position: absolute;
                    color: white;
                    font-size: 10px;
                    `;
              document.querySelector('.room').appendChild(square);
            }
          }
        }
      };

      const saveSetting = (data, name) => {
        let obj = {};
        let html = new DOMParser();
        html = html.parseFromString(data, 'text/html');
        obj.num = 0;
        obj.name = name;
        let chairList = html.children[0].children[1].children;
        chairList = Array.from(chairList);
        let chosen = [];
        let position = [];
        chairList.forEach((element) => {
          if (element.classList.contains('chosen')) {
            let chosenOne = {};
            chosenOne.name = name;
            chosenOne.owner = element.children[0].innerText;
            chosenOne.which = element.classList[1];
            chosen.push(chosenOne);
          }
          let positionOne = {};
          position.name = name;
          positionOne.who = element.classList[1];
          positionOne.top = element.style.top.slice(0, -2);
          positionOne.left = element.style.left.slice(0, -2);
          position.push(positionOne);
          obj.num += 1;
        });
        obj.chosen = chosen;
        obj.position = position;
        console.log(obj);
        return obj;
      };

      socket.on('show', (currentData, name) => {
        console.log(currentData);
        document.querySelector('.room').innerHTML = '';
        chairGenerator(currentData, name);
        nowMap = name;
        let limit = document.querySelector('.room').children.length;
        for (let j = 1; j <= limit; j++) {
          if (document.querySelector(`.num${j}`)) {
            let each = document.querySelector(`.num${j}`);
            each.onclick = () => {
              let selected = event.target.children[0].innerText;
              let str = '' + document.querySelector('.room').innerHTML;
              if (event.target.classList.contains('chosen') == false) {
                // 예약되지 않은 자리
                if (str.includes(whoAmI)) {
                  // 내가 예약을 이미 한 상태일 때
                  let confirm = window.confirm('해당 자리로 이동하시겠습니까?');
                  if (confirm) {
                    socket.emit('choose', selected, whoAmI);
                  }
                } else {
                  // 내가 예약을 하지 않은 상태일 때
                  console.log(selected);
                  console.log(whoAmI);
                  socket.emit('choose', selected, whoAmI);
                }
              } else {
                // 예약된 자리
                alert('해당자리는 이미 예약된 상태입니다');
              }
            };
          } else {
            limit++;
          }
        }
      });

      socket.on('confirmed', (data) => {
        nowMap = data.name;
        console.log('되나');
        socket.emit('saveState', [data], data.name);
      });

      socket.on('occupate', (num, name) => {
        if (whoAmI == name) {
          let is = '' + document.querySelector('.room').innerHTML;
          if (is.includes(name)) {
            // 변경
            for (
              let i = 0;
              i < document.querySelector('.room').children.length;
              i++
            ) {
              if (
                document
                  .querySelector('.room')
                  .children[i].children[0].innerText.includes(name)
              ) {
                let str =
                  document.querySelector('.room').children[i].children[0]
                    .innerText;
                str = str.split(': ' + name)[0];
                console.log(str);
                document.querySelector('.room').children[
                  i
                ].children[0].innerText = str;
                document
                  .querySelector('.room')
                  .children[i].classList.remove('chosen');
                break;
              }
            }
          }
          console.log(num);
          console.log(name);
          let each = document.querySelector(`.num${num}`);
          each.classList.add('chosen');
          each.children[0].innerText += `: ${name}`;
          let data = saveSetting(
            document.querySelector('.room').innerHTML,
            nowMap,
          );
          console.log(data);
          socket.emit('saveState', [data], nowMap);
          socket.emit('dataPush', data);
          dbSave(1);
        }
      });

      const Unoccupate = () => {
        let is = '' + document.querySelector('.room').innerHTML;
        if (is.includes(whoAmI)) {
          const confirm = window.confirm('자리 예약을 취소하시겠습니까?');
          if (confirm) {
            for (
              let i = 0;
              i < document.querySelector('.room').children.length;
              i++
            ) {
              if (
                document
                  .querySelector('.room')
                  .children[i].children[0].innerText.includes(whoAmI)
              ) {
                let str =
                  document.querySelector('.room').children[i].children[0]
                    .innerText;
                str = str.split(': ' + whoAmI)[0];
                console.log(str);
                document.querySelector('.room').children[
                  i
                ].children[0].innerText = str;
                document
                  .querySelector('.room')
                  .children[i].classList.remove('chosen');
                let data = saveSetting(
                  document.querySelector('.room').innerHTML,
                  nowMap,
                );
                dbSave(0);
                socket.emit('saveState', [data], nowMap);
                socket.emit('dataPush', data);
                break;
              }
            }
          }
        } else {
          alert('예약된 자리가 없습니다');
        }
      };

      const dbSave = async (e) => {
        let proto = document.querySelector('.room').innerHTML;
        let title = nowMap;
        let data = saveSetting(proto, title);
        let res = await axios({
          method: 'PATCH',
          url: '/desk/reservationEdit',
          data: data,
        });
        if (res.data == '성공') {
          if (e == 1) {
            alert('자리 예약에 성공하셨습니다');
          } else {
            alert('예약 취소에 성공하셨습니다');
          }
        } else {
          if (e == 1) {
            alert('자리 예약에 실패하셨습니다');
          } else {
            alert('예약 취소에 실패하셨습니다');
          }
        }
      };

      const reset = () => {
        document.querySelector('.room').innerHTML = '';
        nowMap = '리셋';
        let data = saveSetting(
          document.querySelector('.room').innerHTML,
          nowMap,
        );
        socket.emit('saveState', [data], nowMap);
        socket.emit('dataPush', data);
      };
      const placeReset = () => {
        for(let i = 0; i < document.querySelector('.room').children.length; i++){
          if (
                document
                  .querySelector('.room')
                  .children[i].classList.contains("chosen")
              ){
                let str =
                  document.querySelector('.room').children[i].children[0]
                    .innerText;
                str = str.split(': ' + whoAmI)[0];
                console.log(str);
                document.querySelector('.room').children[
                  i
                ].children[0].innerText = str;
                document
                  .querySelector('.room')
                  .children[i].classList.remove("chosen")
              }     
        }
        let data = saveSetting(
                  document.querySelector('.room').innerHTML,
                  nowMap,
                );
                dbSave(0);
                socket.emit('saveState', [data], nowMap);
                socket.emit('dataPush', data);
      }
    </script>
  </body>
</html>
