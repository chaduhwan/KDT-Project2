<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script> -->
    
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script> -->
    <script src="https://kit.fontawesome.com/1a34eeff0c.js"crossorigin="anonymous"></script>
    <!-- <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous" ></script> -->
    <!-- 폰트 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=ADLaM+Display&family=Jua&family=Monoton&display=swap" rel="stylesheet">
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 부트스트랩cdn -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"rel="stylesheet"integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx"crossorigin="anonymous"/>
    <link rel="stylesheet" href="/public/css/classMain2.css" />
    <style>
      .main {
        display: flex;
        flex-direction: row;
        height: 100%;
      }
      .right-bar {
        width: 15%;
        border-style: solid;
        border-radius: 5px;
        border-color: white;
        border-width: 0.4px;
        padding: 10px;
        /* right: 10px; */
        margin-left: 1190px;
        margin-top: 430px;
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .square {
        width: 60px;
        height: 60px;
        background-color: #A7ECEE;
        border-radius: 10px;
        margin: 1vw;
      }
      .room {
        width: 100%;
        background-color: #FFE5B8;
        border-radius: 0 0 20px 20px;
      }
      .chosen {
        background-color: #4993FA;
      }
      .hide {
        margin : 1vw;
        display: none;
      }
      .btn-custom{
        border-style: none;
        border-radius: 5px;
        background-color: white;
        padding: 6px;
        margin: 5px;
      }
      #data-list2{
        border-radius: 5px;
        margin: 10px;
        border-style: none;
      }
    </style>
  </head>
  <body>
    <div id="hide" class="square hide"></div>
    <div class="main_container">
      <div class="head1 d-flex justify-content-between">
        <div class="head1-logo "><img src="/public/default/logo-removebg.png" style="width: 30px; height: 30px;"></img><span>CLAVI</span></div>
        <i class="head1-profile fa-solid fa-user " data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" style="color: white; "></i>
          <!-- <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Toggle right offcanvas</button> -->
      </div>
      <ul class="nav nav-tabs dropup">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="/board"><i class="fa-solid fa-chalkboard-user"></i>  BOARD</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown active dropdown-toggle" data-bs-toggle="dropdown" role="button" aria-expanded="false"><i class="fa-solid fa-chair"></i>  SEAT</a>
            <ul class="dropdown-menu" style="min-width: fit-content;
            width: 120px; ">
              <li><a class="dropdown-item" href="/desk/reservation">자리 예약</a></li>
              <li><a class="dropdown-item" href="/desk/generator">자리 배치</a></li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/chat"><i class="fa-solid fa-comments"></i>  MESSAGE</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/noteManager"><i class="fa-solid fa-box-archive"></i>  CABINET</a>
          </li>
        </ul>
  
        <div class="dropdown nav-drop">
          <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            MENU
          </button>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" type="button" href="/board">BOARD</a></li>
            <li><a class="dropdown-item" type="button" href="/desk/reservation"  >SEAT</a></li>
            <li><a class="dropdown-item" type="button" href="/chat" >MESSAGE</a>
            </li>
            <li><a class="dropdown-item" type="button" href="/noteManager" >CABINET</a></li>
          </ul>
        </div>
      <div class="main_content">
        <div class="main">
          <div class="room"></div>
          <div class="right-bar">
            <div class="button-place">
              <button class="btn-custom" onclick="createChair()">생성</button>
              <button class="btn-custom" onclick="saveChair()">저장</button>
              <button class="btn-custom" onclick="resetChairs()">리셋</button>
            </div>
            <!-- <ul class="data-list"></ul> -->
            <select id="data-list2" onchange="positionChange()">
            </select>
            <div class="button-place">
              <button class="btn-custom" onclick="deleteChair()"> 데이터삭제</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="offcanvas offcanvas-end " tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
      <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasRightLabel"></h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body ">
        <div class="profile_img" id="profile_img"></div>
        <br />
        <div class="offcanvas-menu ">
          <div class="my_page btn" >마이페이지</div>
          <div class="planner btn">플래너</div>
          
          <a class="btn" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            클래스 변경하기
          </a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#">KDT 9기</a></li>
            <li><a class="dropdown-item" href="#">두환이네</a></li>
            <li><a class="dropdown-item" href="#">KDT 1기</a></li>
          </ul>
          <div class="logout btn" onclick="logout()">로그아웃</div>
        </div>
        
      </div>
    </div>
    <script src="/public/js/header.js"></script>
    <script>
      let flag = 0;
      $(".right-bar").draggable()
      let whoAmI = '<%= name %>';
      let myType = '<%= userType %>';
      if (myType != 'leader') {
        alert('권한이 없습니다');
        window.history.back();
      }
      const socket = io();
      let nowData;
      let db = [];
      let dataBase = [];
      axios({
        method: 'GET',
        url: '/desk/get_generator',
      }).then((res) => {
        console.log('data', res);
        let select = document.querySelector("#data-list2")
        select.innerHTML = "";
        let defaultOne = document.createElement('option');
        defaultOne.innerText = "데이터 선택"
        select.appendChild(defaultOne);
        console.log(res.data);
        dataBase = res.data.desk;
        const { desk: data } = res.data;
        for (let i = 0; i < data.length; i++) {
          console.log(res.data.classId)
          console.log(res.data.desk[i].classId)
          if(res.data.classId == res.data.desk[i].classId){
            let op = document.createElement('option');
          op.classList.add(`${data[i].name}`);
          op.innerHTML = `<p class="${data[i].name}">${data[i].name}</p>`;
          op.oncontextmenu = deleteChair;
          op.style.cursor = 'pointer';
          select.appendChild(op);
          }
          
        }
      });

      const positionChange = () => {
        let which = event.currentTarget
        if(which.options[which.selectedIndex].innerText !== "데이터 선택"){
          loadChairs2()
        }
      }

      let arr = [];
      let numArr = [];
      let nemoNum = 0;
      let nemoMuch = 0;

      const createChair = () => {
        flag = 1;
        nemoNum++;
        nemoMuch++;
        console.log(nemoNum);
        let nemo = document.createElement('div');
        let numbering = document.createElement('p');
        numbering.style.marginTop = '5px';
        numbering.style.marginLeft = '5px';
        numbering.innerText = nemoNum;
        nemo.appendChild(numbering);
        nemo.classList.add('square');
        nemo.classList.add(`num${nemoNum}`);
        nemo.style.cssText = `
        position: absolute;
        color: white;
        font-size: 10px;
        `;
        nemo.oncontextmenu = deleteChair;
        document.querySelector('.room').appendChild(nemo);
        arr.push(document.querySelector(`.num${nemoNum}`));
        let copy = nemoNum;
        numArr.push(copy)
        arr.map((i) => {
          i.addEventListener('mouseup', (e) => {
            e.preventDefault();
            console.log(i)
            garo(copy);
            sero(copy);
          });
        });
        $('.square').draggable();
      };

      const garo = (i) => {
        flag = 1;
        let each = document.querySelector(`.num${i}`);
        let standard = 60;
        // let standard = numeric;
        // let half = (standard + 10) / 2;
        let half = (standard) / 2;
        let temp = each.style.left.slice(0, -2);
        if(+temp > document.querySelector(".room").offsetWidth){
          temp = (+document.querySelector(".room").offsetWidth - standard);
        }
        if(+temp < 30){
          temp = 31
        }
        for (let j = 1; j <= 20; j++) {
          let targetValue = standard * j + (j - 1) * 10;
          // let targetValue = standard * j
          if (
            Math.abs(+temp - targetValue) < half &&
            0 < Math.abs(+temp - targetValue)
          ) {
            each.style.left = `${targetValue}px`;
            break;
          }
        }
      };

      const sero = (i) => {
        flag = 1
        let each = document.querySelector(`.num${i}`);
        let standard = 60;
        // let standard = numeric;
        // let half = (standard + 10) / 2;
        let half = (standard) / 2;
        let temp = each.style.top.slice(0, -2);
        if(+temp < 160){
          temp = 132;
        }
        if(+temp > document.querySelector(".room").offsetHeight){
          temp = (document.querySelector(".room").offsetHeight);
        }
        for (let j = 1; j <= 20; j++) {
          let targetValue = standard * j + (j - 1) * 10;
          // let targetValue = standard * j
          if (
            Math.abs(+temp - targetValue) < half &&
            0 < Math.abs(+temp - targetValue)
          ) {
            each.style.top = `${targetValue}px`;
            // console.log(each.style.top.slice(0, -2))
            break;
          }
        }
      };

      const saveChair = async () => {
        let prompt = window.prompt('이름을 설정해주세요');
        if (prompt) {
          if(prompt.includes(" ")){
            prompt = prompt.replace(" ", "_")
          }
          let data = document.querySelector('.room').innerHTML;
          let select = document.querySelector("#data-list2")
          // let ul = document.querySelector('.data-list');
          let chairData = {
            name: prompt,
            data: data,
            num: nemoMuch,
          };
          db.push(chairData);
          let one = saveSetting(data, prompt);
          let res = await axios({
            method: 'POST',
            url: '/desk/reservationConfirm',
            data: one,
          });
          if (res.data == '실패') {
            alert('이미 같은 이름의 데이터가 저장돼있습니다');
            return;
          }
          dataBase.push(one);
          // socket.emit('dataPush', one);
          console.log(db);
          console.log(dataBase);
          let op = document.createElement('option');
          op.classList.add(`${prompt}`);
          op.innerHTML = `<p class="${prompt}" onclick="loadChairs2()">${prompt}</p>`;
          op.oncontextmenu = deleteChair;
          op.style.cursor = 'pointer';
          select.appendChild(op);
          flag = 0;
        }
      };

      const loadChairs2 = () => {
        console.log(flag)
        if(flag == 1){
          if (document.querySelector('.room').hasChildNodes()) {

            let confirm = window.confirm(
            '현재 상태를 저장하지 않고 로드하시겠습니까?',
          );
          if (confirm) {
            document.querySelector('.room').innerHTML = '';
            let which = event.currentTarget
            let whichOne = which.options[which.selectedIndex].children[0].innerText;
            chairGenerator(whichOne);
            $('.square').draggable();
            flag = 0;
          }
          else{
            let which = event.currentTarget
            which.options[0].selected = true
          }

          
        }
        }
         else {
          document.querySelector('.room').innerHTML = '';
          let which = event.currentTarget
          let whichOne = which.options[which.selectedIndex].children[0].innerText;
          chairGenerator(whichOne);
          $('.square').draggable();
          flag = 0;
        }
      };


      const chairGenerator = (li) => {
        let num = 0;
        let specify = li;
        for (let i = 0; i < dataBase.length; i++) {
          //   let num = 0;
          if (dataBase[i].name == specify) {
            for (let j = 0; j < +dataBase[i].num; j++) {
              let square = document.createElement('div');
              let numbering = document.createElement('p');

              //책상번호 만들어주기
              num = dataBase[i].position[j].who.split('num')[1];
              numbering.innerText = num;

              //책상별 클래스 부여
              square.classList.add(
                'square',
                dataBase[i].position[j].who,
                'ui-draggable',
                'ui-draggable-handle',
              );
              for (let a = 0; a < dataBase[i].chosen.length; a++) {
                if (
                  dataBase[i].chosen[a].which == dataBase[i].position[j].who
                ) {
                  square.classList.add('chosen');
                  numbering.innerText = dataBase[i].chosen[a].owner;
                }
              }
              numbering.style.marginTop = '5px';
              numbering.style.marginLeft = '5px';
              square.appendChild(numbering);

              //포지션 부여
              square.style.cssText = `
                    top: ${dataBase[i].position[j].top}px;
                    left: ${dataBase[i].position[j].left}px;
                    position: absolute;
                    color: white;
                    font-size: 10px;
                    `;

              // 리스너 부여
              square.oncontextmenu = deleteChair;
              document.querySelector('.room').appendChild(square);
            }
          }
          nemoNum = num;
          nemoMuch = +dataBase[i].num;
        }
        let limit = num;
        for (let a = 1; a <= limit; a++) {
          if (document.querySelector(`.num${a}`)) {
            document
              .querySelector(`.num${a}`)
              .addEventListener('mouseup', (e) => {
                e.preventDefault();
                garo(a);
                sero(a);
              });
          } else {
            limit++;
          }
        }
      };

      const deleteChair = async (event) => {
        if(event){
          event.preventDefault();
        if (event.currentTarget.classList.contains('square')) {
          let id = event.currentTarget.children[0].innerText;
          if(id.includes(":")){
            id = id.split(":")[0]
          }
          let confirm = window.confirm('요소를 삭제하시겠습니까?');
          if (confirm) {
            jQuery('div').remove(`.num${id}`);
            nemoMuch--;
            console.log(nemoNum);
          }
        }
        }
         else {
          let which = document.querySelector("#data-list2")
          let liName = which.options[which.selectedIndex].children[0].innerText
          let confirm = window.confirm('해당 데이터를 삭제하시겠습니까?');
          if (confirm) {
            let res = await axios({
                  method: 'post',
                  url: '/desk/delete_generator',
                  data: { data: liName },
                });
                if (res.data == '성공') {
                  alert('데이터를 삭제하셨습니다!');
                  window.location.reload()
                } else {
                  alert('데이터를 삭제하지 못했습니다');
                }
          }
        }
      };

      const resetChairs = () => {
        let confirm = window.confirm(
          '현재 상태를 저장하지 않고 다시 시작하시겠습니까?',
        );
        if (confirm) {
          let parent = document.querySelector('.room');
          while (parent.hasChildNodes()) {
            parent.removeChild(parent.firstChild);
            nemoMuch = 0;
            nemoNum = 0;
          }
        }
      };

      const saveSetting = (data, name) => {
        let obj = {};
        let html = new DOMParser();
        html = html.parseFromString(data, 'text/html');
        obj.num = 0;
        obj.name = name;
        let chairList = html.children[0].children[1].children;
        chairList = Array.from(chairList);
        let chosen = [];
        let position = [];
        chairList.forEach((element) => {
          if (element.classList.contains('chosen')) {
            let chosenOne = {};
            chosenOne.name = name;
            chosenOne.owner = element.children[0].innerText;
            chosenOne.which = element.classList[1];
            chosen.push(chosenOne);
          }
          let positionOne = {};
          obj.num += 1;
          positionOne.name = name;
          positionOne.who = element.classList[1];
          positionOne.top = element.style.top.slice(0, -2);
          positionOne.left = element.style.left.slice(0, -2);
          position.push(positionOne);
        });
        obj.chosen = chosen;
        obj.position = position;
        console.log(obj);
        return obj;
      };
    </script>
  </body>
</html>
