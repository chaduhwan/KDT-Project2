<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://kit.fontawesome.com/1a34eeff0c.js"crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous" ></script>
    <!-- 폰트 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=ADLaM+Display&family=Jua&family=Monoton&display=swap" rel="stylesheet">
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 부트스트랩cdn -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"rel="stylesheet"integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx"crossorigin="anonymous"/>
    <link rel="stylesheet" href="/public/css/profileHeader.css" />
    <!-- 소켓io 경로 -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- 메모 -->
    <link href="../public/css/base.css" rel="stylesheet" />
    <link href="../public/css/sandbox.css" rel="stylesheet" />
    <link href="../public/css/embla.css" rel="stylesheet" />
    <script src="https://unpkg.com/embla-carousel/embla-carousel.umd.js"></script>
    
    <link rel="stylesheet" href="/public/css/profile.css">
    <title>Document</title>
    <style>
      .sizing-button{
        width: 20px;
        height: 20px;
      }
      .memo-box{
        display: flex;
        justify-content: center;
        align-items: center;
        /* margin-top: -40px; */
      }
      .memo-item{
        margin-top: -5px;
        width: 200px;
        height: 200px;
        background-position: center;
        background-image: url("../public/default/memo3.png");
        background-repeat: no-repeat;
        background-size:95%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      .memo-editor{
        display: none;
        background-color: transparent;
        width: 80%;
        height: 70%;
        resize: none;
      }
      .memo-editor2{
        background-color: transparent;
        width: 80%;
        height: 70%;
        resize: none;
      }
      .positioner{
        display: flex;
        justify-content: space-between;
      }
      .arrow-wrapper{
        display: flex;
        flex-direction: row;
      }
      .manipulation-wrapper{
        display: flex;
        flex-direction: row;
      }
      /* 버튼 추가하는 영역 */
      .btn-hover.color-9 {
        /* background-image: linear-gradient(
          to right,
          #25aae1,
          #4481eb,
          #04befe,
          #3f86ed
        ); */
        background-color: #00c4ff;
        box-shadow: 0 4px 15px 0 rgba(65, 132, 234, 0.75);
      }
      * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
      }

      .buttons {
        margin: 10%;
        text-align: center;
      }

      .btn-hover {
        width: 140px;
        font-size: 11px;
        font-weight: 600;
        color: #fff;
        cursor: pointer;
        margin: 0px 20px 20px 20px;
        height: 40px;
        text-align: center;
        border: none;
        background-size: 300% 100%;

        border-radius: 12px;
        moz-transition: all 0.4s ease-in-out;
        -o-transition: all 0.4s ease-in-out;
        -webkit-transition: all 0.4s ease-in-out;
        transition: all 0.4s ease-in-out;
      }

      .btn-hover:hover {
        background-position: 100% 0;
        moz-transition: all 0.4s ease-in-out;
        -o-transition: all 0.4s ease-in-out;
        -webkit-transition: all 0.4s ease-in-out;
        transition: all 0.4s ease-in-out;
      }

      .btn-hover:focus {
        outline: none;
      }
      .class-name {
        text-align: center;
        border: 2px solid #e2e0e0;
        border-radius: 10px;
      }
      #makeNotice{
        margin-bottom :10px
      }
    </style>
  </head>

  <body>
    <div class="main_container">
      <div class="head1 d-flex justify-content-between">
        <div class="head1-logo "><img src="/public/default/logo-removebg.png" style="width: 30px; height: 30px;"></img><span>CLAVI</span></div>
        
      </div>

      <!-- 컨테이너 -->
      <div class="main_content" >

        <!-- 클래스 리스트 영역 -->
        <div class="class_list itemM">
          <div class="itemIndex" id="class-menu">참여한 클래스</div>
          <!-- 클래스 목록 -->
          <div class="itemBody">
          <div class="classes">
            <% for(let i = 0; i<Classes.length; i++){ %>
              <div class="class-name" data-class-id="<%=ClassesId[i]%>" onclick="enterClass(this)"><%=Classes[i]%></div>
              <%} %>
          </div>
        <div class="class-make-btn">
          <button type="button" class="btn-hover color-9" data-bs-toggle="modal" data-bs-target="#classModal" >클래스 참여하기</button>
        </div>

        <!-- 클래스 참여 모달 -->
        <div class="modal fade" id="classModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">클래스 참여하기</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form name="ClassSignin">
                  <input type="text" name="token" placeholder="token">
                  <button type="button"  onclick="signinClass()">클래스 참여하기</button>
                </form>
              </div>
            </div>
          </div>
        </div>   

        <!-- 클래스 생성하기 -->
        <div class="class-make">
            <% if(data.userType == "leader" ){ %>
              <div id="makeNotice"> * Leader에게만 보이는 항목입니다 </div>
              <div class="class-make-btn">
              <button type="button" class="btn-hover color-9"data-bs-toggle="modal" data-bs-target="#exampleModal" >클래스 생성하기</button>
            </div>
            <% } %> 

            <!-- 클래스 생성 Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">클래스 생성하기</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <form name="ClassMake">
                      <input type="text" id="setClassName" name="className" placeholder="className">
                      <button type="button" onclick="makeClass()">클래스 생성하기</button>
                    </form>
                  </div>
                </div>
              </div>
            </div>        
          </div>
        </div>
        </div>

        <!-- 로그아웃, 탈퇴 영역 -->
        <div class="exit-zone itemM">
          <div class="userbtn">
            <button type="button" onclick="logout()">로그아웃</button>
            <button type="button" onclick="deleteUser(`<%= data.id %>`)">탈퇴하기</button>
          </div>
        </div>

        <!-- 유저 정보 -->
        <div class="userInfo itemM">
          <div class="itemIndex" >나의 정보</div>
          <div class="itemBody">
            <div class="user-content">
            <!-- 프로필사진 -->
              <div class="profile_img_div"><img class="profile_img" src="<%= data.profileImgPath%>"></div>
              <div>
                <form onsubmit="fileupload(event)" name="form-upload">
                  <div class="img-save">
                  <input type="file" id="dynamic" /><button type="submit"  class="imgEdit" >사진 등록</button>
                </div>
                </form>
              </div>
              <!-- 회원 정보 -->
              <div class="profile-detail">
                <form name="form-profile" id="profile-form">
                  <table>
                    <tr>
                      <th scope="row">이름</th>
                      <td><input type="text" id="name" value="<%= data.name %>" /></td>
                    </tr>
                    <tr>
                      <th scope="row">이메일</th>
                      <td><input type="email" id="email" value="<%= data.email%>" /></td>
                    </tr>
                    <tr>
                      <th scope="row">전화번호</th>
                      <td><input type="number" id="phone" value="<%= data.phone %>" /></td>
                    </tr>
                  </table>
                  <br/>
                  <button id="editbutton" type="button" onclick="registerEdit(`<%= data.id %>`)">Edit</button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <!-- 플래너, 노트 존 -->
        <!-- <div class="my-note itemM">
          <div id="myPlanner"></div>
          <div id="myNote"></div>
        </div> -->

        <!-- 메모 -->
        <div class="memo-zone itemM" onclick="modeChange()">
          <div class="itemIndex">메모</div>
            <div class="itemBody">
            <section class="sandbox__carousel">
              <div class="embla">
                <div class="embla__buttons positioner">
                  <div class="arrow-wrapper">
                    <button class="embla__button embla__button--prev sizing-button" type="button">
                      <svg class="embla__button__svg" viewBox="0 0 532 532">
                        <path
                          fill="currentColor"
                          d="M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z"
                        ></path>
                      </svg>
                    </button>
                    <button class="embla__button embla__button--next sizing-button" type="button">
                      <svg class="embla__button__svg" viewBox="0 0 532 532">
                        <path
                          fill="currentColor"
                          d="M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z"
                        ></path>
                      </svg>
                    </button>
                  </div>
                  <button class="close-master" type="button" onclick="postingZone()">+</button>
                </div>
                <div class="embla__viewport">
                  <div class="embla__container">
                  </div>
                </div>
              </div>
            </section>
          </div>
        </div>

        <!-- 내가 쓴 글 -->
        <div class="myBoards itemM">
          <div class="itemIndex">내가 쓴 글</div>
            <div class="itemBody">
              <% for (let i = 0 ; i < myBoard.length ; i ++) {%>
                <div class="board-object" data-board-id="<%=myBoard[i].BoardId%>" onclick="boardDetail(this)">
                        <div class="board-high">
                            <div class="board-class"> <%=myBoard[i].ClassId%> </div>
                            <div class="board-title"> <%=myBoard[i].title%></div>
                            <div class="board-date"> <%=myBoard[i].date%></div>
                            <div class="like-count"><i class="fa-regular fa-thumbs-up"> <%=likeArr[i]%></i></div>
                        </div>
                        <!-- <div class="board-mid">
                            <img class="board-writer-img" src="">
                            <span> 클래스:<%=myBoard[i].ClassId%> </span>
                            <span class="board-date"> <%=myBoard[i].date%></span>
                            <button type="button" class="boardLike" value="<%=myBoard[i].BoardId%>" onclick="BoardLike(this)">
                            <i class="fa-regular fa-thumbs-up"> <%=likeArr[i]%></i>
                            </button> -->
                          <!-- </div> -->
                        
                    </div>
              <%} %>
            </div>
        </div>
      </div>
    </div>

    <script src="/public/js/profile.js"></script>
    <script src="/public/js/header.js"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>
  </body>
  <script>
    let flag = 0
    let memoNum = 0;
    axios({
      method: "get",
      url: "/profile/memo_get"
    }).then((res) => {
      console.log(res.data.memos)
      memoNum = res.data.memos.length
      getMemo(res.data.memos.reverse())
    })

    const getMemo = (data) => {
      let grandP = document.querySelector(".embla__container")
      let count = 1;
      let idx = 0;
      for(let i = 1; i <= data.length; i++){
        grandP.innerHTML += `<div class="embla__slide sorting">
                      <div class="memo-box">
                        <div class="memo-item" id="item-${data[idx].id}">
                          <p class="memo-content" id="memo-${i}">${data[idx].content}</p>
                          <textarea class="memo-editor" id="memo-editor-${i}" placeholder="메모를 입력하세요" autofocus>${data[idx].content}</textarea>
                          <div class="manipulation-wrapper">
                            <button type="button" onclick="patchMemo(${i})" style="display: none">수정하기</button>
                            <button type="button" onclick="deleteMemo(${i})" style="display: none">삭제하기</button>
                          </div>
                        </div>
                      </div>
                    </div>`
                    count++;
                    idx++;
      }
      memoNum = count + 1;
    }

    const postingZone = () => {
      console.log(flag)
      if(event.currentTarget.innerText == "+" && flag == 0){
        event.currentTarget.innerText = "취소"
        let grandP = document.querySelector(".embla__container")
        let temp = document.createElement("div")
        let one = `<div class="embla__slide sorting">
                    </div>`
        temp.innerHTML = `<div class="embla__slide sorting">
                      <div class="memo-box">
                        <div class="memo-item">
                          <textarea class="memo-editor2" id="memo-editor-${memoNum}" placeholder="메모를 입력하세요" autofocus></textarea>
                          <button type="button" onclick="postMemo(${memoNum})">작성하기</button>
                        </div>
                      </div>
                    </div>`
                    grandP.insertBefore(
                          temp.children[0],
                          grandP.firstChild,
                        );
                      goBack()
        
      }else{
        if(flag == 0){
          event.currentTarget.innerText = "+"
          let grandP = document.querySelector(".embla__container")
          grandP.removeChild(grandP.firstChild)
        }
        
      }
      
    }

    const modeChange = () => {
      if(event.target.classList.contains("memo-item")){
        console.log("메롱")
        console.log(event.target)
        event.target.children[0].style.display= "none";
        event.target.children[1].style.display = "block";
        event.target.children[2].children[0].style.display = "block";
        event.target.children[2].children[1].style.display = "block";
        flag = 1
      }
      else{
        console.log(event.target)
        if(!event.target.classList.contains("memo-editor") && !event.target.classList.contains("close-master")){
          let target = event.currentTarget.children[1].children[0].children[0].children[1].children[0].children[0].children[0].children[0]
          target.children[0].style.display= "block";
          target.children[1].style.display = "none";
          target.children[2].children[0].style.display = "none";
          target.children[2].children[1].style.display = "none";
          flag = 0
        }
      }
      // console.log(event.target)
      // if(event.target == event.currentTarget){
      //   //둘이 같을 때 = 바뀌면안됨

      // }
      // else{
      //   //둘이 다를 때 = 바뀌어야함
      //   event.target 
      // }
      // console.log(event.currentTarget)
      // if(event.currentTarget.children[1].style.display == "none"){
      //   event.currentTarget.children[0].style.display = "none"
      //   event.currentTarget.children[1].style.display = "block"
      //   event.currentTarget.children[2].children[0].style.display = "block"
      //   event.currentTarget.children[2].children[1].style.display = "block"
      // }
      // else{
      //   if(event.target == event.currentTarget){
      //     event.currentTarget.children[0].style.display = "block"
          // event.currentTarget.children[1].style.display = "none"
          // event.currentTarget.children[2].children[0].style.display = "none"
          // event.currentTarget.children[2].children[1].style.display = "none"
      //   }
      // }
      // if(event.target.children[1].style.display == "none"){
      //   event.target.children[0].style.display = "none"
      //   event.target.children[1].style.display = "block"
      //   event.target.children[2].children[0].style.display = "block"
      //   event.target.children[2].children[1].style.display = "block"
      // }
      // else{
      //   if(event.target == event.currentTarget){
      //     event.target.children[0].style.display = "block"
      //     event.target.children[1].style.display = "none"
      //     event.target.children[2].children[0].style.display = "none"
      //     event.target.children[2].children[1].style.display = "none"
      //   }
      // }
    }

    const postMemo = async (num) => {
      let data = document.querySelector(`#memo-editor-${num}`).value
      console.log(data)
      let obj = {
        content: data
      }
      let res = await axios({
        method: "post",
        url: "/profile/memo_post",
        data: obj
      })
      if(res.data == "성공"){
        window.location.reload()
      }
    }


    const patchMemo = async (num) => {
      let content = document.querySelector(`#memo-editor-${num}`).value
      let id = document.querySelector(`#memo-editor-${num}`).parentNode.id.split("-")[1]
      let obj = {
        content: content,
        id : id
      }
      let res = await axios({
        method: "patch",
        url: "/profile/memo_patch",
        data: obj
      })
      if(res.data == "성공"){
        window.location.reload()
      }
    }

    const deleteMemo = async (num) => {
      let id = document.querySelector(`#memo-editor-${num}`).parentNode.id.split("-")[1]
      let obj = {
        id : id
      }
      let res = await axios({
        method: "delete",
        url: "/profile/memo_delete",
        data: obj
      })
      if(res.data == "성공"){
        window.location.reload()
      }
    }
    
  </script>
  <script>

          //소켓io
    // console.log(`<%= data.profileImgPath %>`)
    // const pathdata = "<%= data.profileImgPath %>"
    window.localStorage.setItem("profileImgPath", "<%= data.profileImgPath %>");


    if(document.querySelector(".myBoards itemM").hasChildNodes){

        for(let i = 0; i < document.querySelector(".myBoards itemM").children.length; i++){
          let temp = document.querySelector(".myBoards itemM").children[i].children[2].innerText 
          document.querySelector(".myBoards itemM").children[i].children[2].innerText = ""
          let arr = Array.from(format(temp))
        for(let j = 0; j < arr.length; j++){
          document.querySelector(".myBoards itemM").children[i].children[2].appendChild(arr[j])   
    }}}

    // 보드 디테일 불러오기
    function boardDetail(element) {
        const boardid = element.getAttribute('data-board-id');
        axios({
            method : 'GET',
            url : `/board/detail?boardId=${boardid}`,
            params :{ boardId : boardid}
        }).then(
            window.location.href=`/board/detail?boardId=${boardid}`
        )
    }
    
      //클래스만들기 함수
      async function makeClass() {
        const form = document.forms["ClassMake"];
        const data = {
        className: form.className.value,
        leader: "<%= data.name %>",
        };
           const res = await axios({
         method: "POST",
          url: "/class/make",
         data: data,
          });
         if (res.data.res) {
          alert(
            `클래스 생성완료! 클래스 공유 코드입니다 외부유출에 조심하세요 : ${res.data.token}`
         );
         }
           window.location.reload();
        }

      //클래스 들어가기 함수
      async function signinClass(){
        const form = document.forms['ClassSignin']
        const data = {
          token : form.token.value
        }
        const res = await axios({
          method : 'POST',
          url : '/class/signin',
          data : data
        })
        if(res.data.success === true) {
          alert('참여완료!')
          window.location.reload()
        } else {
          alert('존재하지않는 클래스이거나 참여코드가 틀렸습니다!')
        }
      }

  </script>
  <script type="text/javascript">
    const emblaNode = document.querySelector('.embla');
    const viewportNode = emblaNode.querySelector('.embla__viewport');
    const prevBtn = emblaNode.querySelector('.embla__button--prev');
    const nextBtn = emblaNode.querySelector('.embla__button--next');

    var options = { loop: true, containScroll: 'trimSnaps' };

    var emblaApi = EmblaCarousel(viewportNode, options);

    const goBack = () => {
      emblaApi.scrollTo(0)
    }

    const addTogglePrevNextBtnsActive = (emblaApi, prevBtn, nextBtn) => {
      const togglePrevNextBtnsState = () => {
        if (emblaApi.canScrollPrev()) prevBtn.removeAttribute('disabled');
        else prevBtn.setAttribute('disabled', 'disabled');

        if (emblaApi.canScrollNext()) nextBtn.removeAttribute('disabled');
        else nextBtn.setAttribute('disabled', 'disabled');
      };

      emblaApi
        .on('select', togglePrevNextBtnsState)
        .on('init', togglePrevNextBtnsState)
        .on('reInit', togglePrevNextBtnsState);

      return () => {
        prevBtn.removeAttribute('disabled');
        nextBtn.removeAttribute('disabled');
      };
    };

    const addPrevNextBtnsClickHandlers = (emblaApi, prevBtn, nextBtn) => {
      const scrollPrev = () => {
        emblaApi.scrollPrev();
      };
      const scrollNext = () => {
        emblaApi.scrollNext();
      };
      prevBtn.addEventListener('click', scrollPrev, false);
      nextBtn.addEventListener('click', scrollNext, false);

      const removeTogglePrevNextBtnsActive = addTogglePrevNextBtnsActive(
        emblaApi,
        prevBtn,
        nextBtn,
      );

      return () => {
        removeTogglePrevNextBtnsActive();
        prevBtn.removeEventListener('click', scrollPrev, false);
        nextBtn.removeEventListener('click', scrollNext, false);
      };
    };

    const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
      emblaApi,
      prevBtn,
      nextBtn,
    );
    emblaApi.on('destroy', removePrevNextBtnsClickHandlers);
  </script>
</html>
