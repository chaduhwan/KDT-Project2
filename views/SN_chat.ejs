<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- 부트스트랩 -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
      crossorigin="anonymous"
    />

    <link
      href="https://fonts.googleapis.com/css?family=Raleway"
      rel="stylesheet"
    />
    <link
      href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.css"
    />
    <!-- 제이쿼리cdn -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.js"
      integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="
      crossorigin="anonymous"
    ></script>
    <!-- axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 소켓io 경로 -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- <link rel="stylesheet" href="../css/chat.css" /> -->
    <title>채팅방</title>
    <style>
      body {
        font-family: "Raleway", sans-serif;
        background-color: #accedc;
        margin: 50px 0px;
      }
      .main-section small {
        font-size: 12px;
      }
      .main-section h3,
      .main-section h5 {
        margin: 0px;
      }
      .main-section {
        width: 960px;
        background-color: #fff;
        margin: auto;
      }
      .head-section {
        border-bottom: 1px solid #e6e6e6;
        clear: both;
        overflow: hidden;
        width: 100%;
      }
      .headLeft-section {
        width: calc(30% - 1px);
        float: left;
        border-right: 1px solid #e6e6e6;
      }
      .headLeft-sub {
        padding: 15px;
        text-align: center;
      }
      .headLeft-sub input {
        width: 60%;
        border-radius: 0px;
        border: 1px solid #e6e6e6;
        padding: 7px;
      }
      .headLeft-sub button {
        background: #009ef7;
        color: #fff;
        border: 1px solid #e6e6e6;
        padding: 7px 15px;
      }
      .headRight-section {
        width: 70%;
        float: left;
      }
      .headRight-sub {
        padding: 10px 15px 0px 15px;
      }
      .body-section {
        clear: both;
        overflow: hidden;
        width: 100%;
      }
      .left-section {
        width: calc(30% - 1px);
        float: left;
        height: 500px;
        border-right: 1px solid #e6e6e6;
        background-color: #fff;
        z-index: 1;
        position: relative;
      }
      .left-section ul {
        padding: 0px;
        margin: 0px;
        list-style: none;
      }
      .left-section ul li {
        padding: 15px 0px;
        cursor: pointer;
      }
      .left-section ul li.active {
        background: #009ef7;
        color: #fff;
        position: relative;
      }
      .mCustomScrollBox,
      .mCSB_container {
        overflow: unset !important;
      }
      .left-section ul li.active .desc .time {
        color: #fff;
      }
      .left-section ul li.active:before {
        position: absolute;
        content: "";
        right: -10px;
        border: 5px solid #009ef7;
        top: 0px;
        bottom: 0px;
        border-radius: 0px 3px 3px 0px;
      }
      .left-section ul li.active:after {
        position: absolute;
        content: "";
        bottom: 0px;
        right: 0px;
        left: auto;
        width: 100%;
        top: 0px;
        -webkit-box-shadow: -8px 4px 10px #a1a1a1;
        -moz-box-shadow: -8px 4px 10px #a1a1a1;
        box-shadow: -8px 4px 10px #a1a1a1;
      }
      .left-section .chatList {
        overflow: hidden;
      }
      .left-section .chatList .img {
        width: 60px;
        float: left;
        text-align: center;
        position: relative;
      }
      .left-section .chatList .img img {
        width: 30px;
        height: 25px;
        border-radius: 50%;
      }
      .left-section .chatList .img i {
        position: absolute;
        font-size: 10px;
        color: #52e2a7;
        border: 1px solid #fff;
        border-radius: 50%;
        left: 10px;
      }
      .left-section .chatList .desc {
        width: calc(100% - 60px);
        float: left;
        position: relative;
      }
      .left-section .chatList .desc h5 {
        margin-top: 9px;
        line-height: 5px;
      }
      .left-section .chatList .desc .time {
        position: absolute;
        right: 15px;
        color: #c1c1c1;
      }
      .right-section {
        width: 70%;
        float: left;
        height: 500px;
        background-color: #f6f6f6;
        position: relative;
      }
      .message {
        height: calc(100% - 68px);
        font-family: sans-serif;
      }
      .message ul {
        padding: 0px;
        list-style: none;
        margin: 0px auto;
        width: 90%;
        overflow: hidden;
      }
      .message ul li {
        position: relative;
        width: 80%;
        padding: 15px 0px;
        clear: both;
      }
      .message ul li.msg-left {
        float: left;
      }
      .message ul li.msg-left img {
        position: absolute;
        width: 40px;
        bottom: 30px;
      }
      .message ul li.msg-left .msg-desc {
        margin-left: 70px;
        font-size: 12px;
        background: #e8e8e8;
        padding: 5px 10px;
        border-radius: 5px 5px 5px 0px;
        position: relative;
      }
      .message ul li.msg-left .msg-desc:before {
        position: absolute;
        content: "";
        border: 10px solid transparent;
        border-bottom-color: #e8e8e8;
        bottom: 0px;
        left: -10px;
      }
      .message ul li.msg-left small {
        float: right;
        color: #c1c1c1;
      }
      .message ul li.msg-right {
        float: right;
      }
      .message ul li.msg-right img {
        position: absolute;
        width: 40px;
        right: 0px;
        bottom: 30px;
      }
      .message ul li.msg-right .msg-desc {
        margin-right: 70px;
        font-size: 12px;
        background: #cce5ff;
        color: #004085;
        padding: 5px 10px;
        border-radius: 5px 5px 5px 0px;
        position: relative;
      }
      .message ul li.msg-right .msg-desc:before {
        position: absolute;
        content: "";
        border: 10px solid transparent;
        border-bottom-color: #cce5ff;
        bottom: 0px;
        right: -10px;
      }
      .message ul li.msg-right small {
        float: right;
        color: #c1c1c1;
        margin-right: 70px;
      }
      .message ul li.msg-day {
        border-top: 1px solid #ebebeb;
        width: 100%;
        padding: 0px;
        margin: 15px 0px;
      }
      .message ul li.msg-day small {
        position: absolute;
        top: -10px;
        background: #f6f6f6;
        color: #c1c1c1;
        padding: 3px 10px;
        left: 50%;
        transform: translateX(-50%);
      }
      .right-section-bottom {
        background: #fff;
        width: 100%;
        padding: 15px;
        position: absolute;
        bottom: 0px;
        border-top: 1px solid #e6e6e6;
        text-align: center;
      }
      .right-section-bottom input {
        border: 0px;
        padding: 8px 5px;
        width: calc(100% - 150px);
      }
      .right-section-bottom .btn-send {
        border: 0px;
        padding: 8px 10px;
        float: right;
        margin-right: 30px;
        color: #009ef7;
        font-size: 18px;
        background: #fff;
        cursor: pointer;
      }
      .upload-btn {
        position: relative;
        overflow: hidden;
        display: inline-block;
        float: left;
      }
      .upload-btn .btn {
        border: 0px;
        padding: 8px 10px;
        color: #009ef7;
        font-size: 18px;
        background: #fff;
        cursor: pointer;
      }
      .upload-btn input[type="file"] {
        font-size: 100px;
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0;
      }
      .addon {
        display: flex;
        justify-content: space-between;
        padding-right: 15px;
        padding-top: 10px;
        padding-bottom: 5px;
      }
    </style>
  </head>
  <body>
    <div class="main-section">
      <div class="head-section">
        <div class="headLeft-section">
          <div class="headLeft-sub">
            <!-- 채팅방에 초대할 상대방 -->
            <form id="room">
              <i
                class="fa-solid fa-users-line"
                id="userList"
                class="btn btn-primary"
                data-bs-toggle="modal"
                data-bs-target="#staticBackdrop"
              ></i>
              <input type="text" id="search" placeholder="대화할 사람이름" />
              <button><i class="fa fa-search"></i></button>
              <!-- <button>초대하기</button> -->
            </form>
          </div>
        </div>
        <div class="headRight-section">
          <div class="headRight-sub">
            <h3 id="OtherPerson1">상대방 이름 입력하는 곳</h3>
            <small>상태메시지 입력</small>
          </div>
        </div>
      </div>
      <div class="body-section">
        <div
          class="left-section mCustomScrollbar"
          data-mcs-theme="minimal-dark"
        >
          <ul>
            <li>
              <div class="chatList">
                <div class="img">
                  <i class="fa fa-circle" style="color: gray"></i>
                  <img
                    src="https://t1.daumcdn.net/cfile/tistory/27738433597DCB1312"
                  />
                </div>
                <div class="desc">
                  <small class="time">시간입력</small>
                  <h5 id="OtherPerson2">단체 채팅방</h5>
                  <div class="addon">
                    <small>ㅋㅋㅋㅋ ㅎㅇ</small>
                    <small>12</small>
                  </div>
                </div>
              </div>
            </li>
          </ul>
        </div>
        <!-- 채팅창 section -->
        <div class="right-section">
          <div class="message" style="overflow-y: scroll">
            <ul id="chat-messages">
              <!-- 상대방이 보낸 메시지 -->
              <!-- <li class="msg-left">
                <div class="msg-left-sub">
                  <img
                    src="https://t1.daumcdn.net/cfile/tistory/27738433597DCB1312"
                  />
                  <div class="msg-desc">왼쪽내용 입력하는 곳!!</div>
                  <small>시간입력</small>
                </div>
              </li> -->
              <!-- 내가보낸메시지 -->
              <!-- <li class="msg-right">
                <div class="msg-left-sub">
                  <img
                    src="https://i3.ruliweb.com/img/20/03/16/170dee06b1347bc9f.jpg"
                  />
                  <div class="msg-desc">오른쪽 내용 입력</div>
                  <small>시간입력</small>
                </div>
              </li>
              <li class="msg-day"><small>날짜입력하는 곳</small></li> -->
            </ul>
          </div>
          <!-- 채팅창 section 끝나는곳 -->
          <!-- 메세지 보내는 곳 -->
          <div class="right-section-bottom">
            <form>
              <div class="upload-btn">
                <button class="btn"><i class="fa fa-photo"></i></button>
                <input type="file" name="myfile" />
              </div>
              <div id="messageStatus" style="display: none">
                상대방이 입력중입니다..
              </div>
            </form>
            <form id="chat">
              <input type="text" id="message" />
              <button class="btn-send"><i class="fa fa-send"></i></button>
            </form>
            <!-- 여기까지 -->
          </div>
          <!-- 메시지 보내는곳 끝 -->
        </div>
      </div>
    </div>
    <!-- Modal -->
    <div
      class="modal fade"
      id="staticBackdrop"
      data-bs-backdrop="static"
      data-bs-keyboard="false"
      tabindex="-1"
      aria-labelledby="staticBackdropLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="staticBackdropLabel">현재 접속자</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body"></div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              취소
            </button>
            <button type="button" class="btn btn-primary">확인</button>
          </div>
        </div>
      </div>
    </div>
    <!-- /////////////// -->
    <script>
      //소켓 설정
      const socket = io();
      //////////변수이름///////////////

      //현재 접속한 유저 이름
      let username;

      //메시지를 보내는 상대방 이름
      let otherName;

      //타이핑 타이머
      let timer;

      //나한테 지금 만들어진 채팅방이름
      let myRoomList = [];
      //사진1번, 2번 (이건 나중에 프로필사진 추가하면 삭제하기)
      const pic1 = "https://t1.daumcdn.net/cfile/tistory/27738433597DCB1312";
      const pic2 = "https://i3.ruliweb.com/img/20/03/16/170dee06b1347bc9f.jpg";
      const pic3 =
        "https://i.namu.wiki/i/sYSJY7DwDYvqCrRvxzAgqpbm7EQzxE6jKPBhRBJGLwRzWvA-uj3YEQjgAVfR1snu3tian_0NYAtv2b06664WkA.webp";
      ////////////////////////////////

      ////////////함수////////////////
      //날짜 구하기 위한 함수
      let now = new Date();
      let hour = now.getHours();
      let minute = now.getMinutes();
      let sendTime = `${hour.toString().padStart(2, "0")}:${minute
        .toString()
        .padStart(2, "0")}`;

      // 상대방이 출력하는 메시지 함수
      function createLeftMessage(imageSrc, messageText, timestamp) {
        const listItem = document.createElement("li");
        listItem.classList.add("msg-left");

        const messageContainer = document.createElement("div");
        messageContainer.classList.add("msg-left-sub");

        const image = document.createElement("img");
        image.src = imageSrc;

        const message = document.createElement("div");
        message.classList.add("msg-desc");
        message.textContent = messageText;

        const time = document.createElement("small");
        time.textContent = timestamp;

        messageContainer.appendChild(image);
        messageContainer.appendChild(message);
        messageContainer.appendChild(time);

        listItem.appendChild(messageContainer);

        return listItem;
      }

      // 내가 출력하는 메시지 함수
      function createRightMessage(msgText, imgUrl, timestamp) {
        const listItem = document.createElement("li");
        listItem.classList.add("msg-right");

        const msgLeftSub = document.createElement("div");
        msgLeftSub.classList.add("msg-left-sub");

        const imgElement = document.createElement("img");
        imgElement.src = imgUrl;

        const msgDesc = document.createElement("div");
        msgDesc.classList.add("msg-desc");
        msgDesc.textContent = msgText;

        const smallElement = document.createElement("small");
        smallElement.textContent = timestamp;

        msgLeftSub.appendChild(imgElement);
        msgLeftSub.appendChild(msgDesc);
        msgLeftSub.appendChild(smallElement);

        listItem.appendChild(msgLeftSub);

        return listItem;
      }
      //미리보기 메시지 출력하는 함수
      function createMessageElement(
        time,
        otherPersonName,
        previewMessage,
        imageUrl,
        notRead
      ) {
        const imgDiv = document.createElement("div");
        imgDiv.className = "img";

        const addonDiv = document.createElement("div");
        addonDiv.className = "addon";

        const imgIcon = document.createElement("i");
        imgIcon.className = "fa fa-circle";
        imgIcon.id = otherPersonName;

        const imgElement = document.createElement("img");
        imgElement.src = imageUrl;

        const descDiv = document.createElement("div");
        descDiv.className = "desc";

        descDiv.addEventListener("click", function () {
          //그 방으로 들어가게 함
          otherName = otherPersonName;
          OtherPerson1.innerText = otherName;
          alert(`${otherName}님 방에 입장하였습니다.`);
          //create -> 방 만들기
          socket.emit("create", otherName, username);
        });
        const previewMessageElement = document.createElement("small");
        previewMessageElement.textContent = previewMessage;

        const notReadMsg = document.createElement("small");
        notReadMsg.textContent = notRead;

        ///desc div 안에 있는 small, h5, small
        const timeElement = document.createElement("small");
        timeElement.className = "time";
        timeElement.textContent = time;

        const otherPersonElement = document.createElement("h5");
        otherPersonElement.id = "OtherPerson2";
        otherPersonElement.textContent = otherPersonName;

        ///
        addonDiv.appendChild(previewMessageElement);
        addonDiv.appendChild(notReadMsg);

        imgDiv.appendChild(imgIcon);
        imgDiv.appendChild(imgElement);

        descDiv.appendChild(timeElement);
        descDiv.appendChild(otherPersonElement);
        descDiv.appendChild(addonDiv);

        chatContainer.appendChild(imgDiv);
        chatContainer.appendChild(descDiv);
        return chatContainer;
      }

      //스크롤 다운 함수
      function scrollBottom() {
        messageList.scrollTo(0, messageList.scrollHeight);
      }

      // 새로운 접속자를 추가하는 함수
      function addVisitor(visitorName) {
        var visitorElement = document.createElement("div");
        visitorElement.textContent = visitorName;
        visitorElement.id = visitorName;
        visitorElement.addEventListener("click", function () {
          //이름을 눌렀을 때 모달이 닫히게 하는 이벤트
          $("#modal").modal("hide");
          //그 방으로 들어가게 함
          otherName = visitorName;
          OtherPerson1.innerText = otherName;
          alert(`${otherName}님 방에 입장하였습니다.`);
          //create -> 방 만들기
          socket.emit("create", otherName, username);
        });
        modalBody.appendChild(visitorElement);
      }

      //createdAt에서 시:분 으로 추출하는 함수
      function formatTime(row) {
        const createdAtValue = row.createdAt;
        const createdDate = new Date(createdAtValue);
        const hours = createdDate.getHours();
        const minutes = createdDate.getMinutes();
        //시:분이 앞에 한자리 수 일때 바꿔주는거
        const formattedTime = `${hours.toString().padStart(2, "0")}:${minutes
          .toString()
          .padStart(2, "0")}`;
        return formattedTime;
      }
      ////////////////////////////////
      //이름받기(지울거임ㅎ)
      socket.on("sendName", (name) => {
        username = name;
      });
      //상대채팅생성하는 ul태그
      const chatMessageList = document.getElementById("chat-messages");
      const messageList = document.querySelector(".message");
      //방 입력하는 form태그
      const roomForm = document.querySelector("#room");
      //방 번호 적는 form
      const searchName = document.querySelector("#search");
      //메시지 form태그
      const messageForm = document.querySelector("#chat");
      //채팅 리스트 지우는거
      const clear = document.getElementById("chat-messages");
      //채팅방 리스트
      const chatContainer = document.querySelector(".chatList");
      //모달에 나오는 유저 리스트
      var modalBody = document.querySelector(".modal-body");

      //채팅방 제일 위에 뜨는 이름
      const OtherPerson1 = document.querySelector("#OtherPerson1");
      const OtherPerson2 = document.querySelector("#OtherPerson2");
      // 현재 접속자 (모달화면) 갱신하는 거
      socket.on("accessCheck", (roomList, username) => {
        modalBody.textContent = "";
        roomList.forEach((res) => {
          addVisitor(res);
        });
      });

      //현재 접속자 계속 찾아서 새로 생기면 불 바꾸기
      //현재 접속자와 내 채팅방에 있는 사람이 같으면 초록불로 바꿔주기
      socket.on("getAccess", (roomList) => {
        roomList.forEach((room) => {
          myRoomList.forEach((myRoom) => {
            if (room == myRoom) {
              console.log("방금 접속한사람?", myRoom);
              document.querySelector(`#${myRoom}`).style.color = "green";
            }
          });
        });
      });

      //나가면 회색으로 변하는 이벤트
      socket.on("deleteList", (username) => {
        document.querySelector(`#${username}`).style.color = "gray";
      });
      //내가 채팅하고 잇는 방 불러오고 -> 그 채팅방 미리보기 메시지까지 가져오는거
      socket.on("chatList", async (username, roomList) => {
        //참여 채팅방 불러오기
        const listResult = await axios({
          method: "POST",
          url: "/myChatList",
          data: {
            username: username,
          },
          //방 불러올 때 내가 읽지 않은 채팅의 수를 가져옴
          //각 방의 메세지 하나씩 불러오기
        });
        let i = 0;
        for (const myMessage of listResult.data.myJoinRoom) {
          const messageResult = await axios({
            method: "POST",
            url: "/myMessage",
            data: {
              send: myMessage,
            },
          });
          const preViewMessage = await createMessageElement(
            formatTime(messageResult.data.row),
            messageResult.data.send,
            messageResult.data.message,
            pic3,
            listResult.data.notReadMessage[i]
          );
          //나랑 채팅방 만들어진 사람 배열에 저장해놓기
          myRoomList.push(messageResult.data.send);
          await preViewMessage;
          //element만들고 접속자 icon 색상 바꾸기
          for await (const currentList of roomList) {
            let changeElement = document.querySelector(
              `#${messageResult.data.send}`
            );
            if (currentList == messageResult.data.send) {
              changeElement.style.color = "green";
            } else {
              changeElement.style.color = "gray";
            }
          }
          i++;
        }
      });
      //방 번호 정해서 들어가기
      roomForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        //상대방 방 번호(이름)
        otherName = searchName.value;
        //방 들어가면 현재 가입되어 있는 사람들의 정보를 가져옴
        const nowUserList = await axios({
          method: "POST",
          url: "/userList",
          data: {
            myName: username,
          },
        });
        console.log("현재 유저목록", nowUserList.data);
        console.log(nowUserList.data.indexOf(otherName));
        //유저 리스트에 있는 사람들만 방에 초대할 수 있음
        if (otherName == username) {
          alert("다른 이름을 입력해주세요.");
        } else if (nowUserList.data.indexOf(otherName) != -1) {
          //리스트 검사해서 그 사람이 있으면 방 만들어줌
          // create -> 방 만들기
          socket.emit("create", otherName, username);
          socket.on("true", () => {
            //원래 헤더만 바꿔야 되는데 일단은 이것만 바꾸고 나중에 수정하기
            OtherPerson1.innerText = otherName;
            // OtherPerson2.innerText = otherName;
          });
          alert(`${otherName}님 방에 입장하였습니다.`);
        } else {
          //없으면 가입되지 않은 사람이라고 해줌
          alert("가입되지 않은 사용자 입니다.");
        }
      });

      //메시지 보내는 이벤트
      messageForm.addEventListener("submit", (e) => {
        e.preventDefault();
        //메시지 input
        const message = document.querySelector("#message");
        socket.emit("sendMessage", message.value, username, otherName);
        scrollBottom();
        message.value = "";
      });

      //보낸 메시지 받는 이벤트
      socket.on("newMessage", (message, userid) => {
        if (userid == username) {
          const newChatMessage = createRightMessage(message, pic2, sendTime);
          chatMessageList.appendChild(newChatMessage);
        } else {
          const newChatMessage = createLeftMessage(pic1, message, sendTime);
          chatMessageList.appendChild(newChatMessage);
        }
        //메시지 받으면 입력중입니다. 문구 안 보이게 바로 삭제
        $("#messageStatus")[0].style.display = "none";
        scrollBottom();
      });

      //이전 채팅 내용 가져오기(roomNumber => 현재 입장한 방 번호(UUID))
      socket.on("roomNumber", (data) => {
        axios({
          method: "POST",
          url: "/preMessage",
          data: {
            roomNum: data,
            username: username,
          },
        }).then((res) => {
          clear.innerHTML = "";
          const postMessage = res.data.chatMessage;
          postMessage.forEach(async (row) => {
            //내가 보낸 메시지는 오른쪽에 출력
            console.log("체크된 값은?", row.checked);
            if (row.send == username) {
              const newChatMessage = createRightMessage(
                row.message,
                pic2,
                formatTime(row)
              );
              chatMessageList.appendChild(newChatMessage);
            } else {
              //다른 사람이 보낸 메시지는 왼쪽에 출력
              const newChatMessage = createLeftMessage(
                pic1,
                row.message,
                formatTime(row)
              );
              chatMessageList.appendChild(newChatMessage);
            }
          });
        });
      });
      ///이전채팅내용 끝부분//////

      //타이핑중..
      $("#message").on("input", function () {
        const msgValue = $("#message").val();
        socket.emit("typing", username, msgValue);
      });
      socket.on("type", (chatName, msgValue) => {
        //타임아웃 제거해주는 함수
        clearTimeout(timer);
        $("#messageStatus")[0].style.display = "block";
        timer = setTimeout(() => {
          $("#messageStatus")[0].style.display = "none";
        }, 500);
      });
    </script>
    <!-- 폰트어썸 코드 -->
    <script
      src="https://kit.fontawesome.com/61baba42f5.js"
      crossorigin="anonymous"
    ></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <!-- custom scrollbar plugin -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.concat.min.js"></script>
    <!-- 부트스트랩 -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
