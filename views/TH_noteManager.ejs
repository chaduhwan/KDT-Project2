<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="/public/js/header.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/1a34eeff0c.js"crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous" ></script>
    <!-- 폰트 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=ADLaM+Display&family=Jua&family=Monoton&display=swap" rel="stylesheet">
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 부트스트랩cdn -->
    <!-- <link href="https://cdn.jsdelivr.net/npm/@alphardex/aqua.css/dist/aqua.min.css" rel="stylesheet"/> -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"rel="stylesheet"integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx"crossorigin="anonymous"/>
    <link rel="stylesheet" href="/public/css/classMain.css" />
    <link rel="stylesheet" href="/public/css/button.scss" />
    <title>Document</title>
    <title>Document</title>
    <style>
      body {
        position: relative;
      }
      .result {
        padding: 10px;
        display: flex;
        flex-direction: row;
        max-width: 100%;
        flex-wrap: wrap;
      }
      .element {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100px;
        height: 150px;
        border-radius: 5px;
        /* border-style: solid;
        border-width: 1px;
        border-radius: 5px;
        border-color: #646464; */
        cursor: pointer;
        margin: 20px;
        z-index: 1;
      }
      .wrapper {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      .element:hover {
        border-style: solid;
        border-width: 1px;
        border-radius: 5px;
        border-color: blue;
      }
      .overflow {
        display: flex;
        justify-content: center;
        width: 120px;
        height: 48px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        text-decoration: none;
        color: black;
      }
      .clicked {
        background-color: blue;
      }

      .list_modal {
        display: none;
        justify-content: center;
        /* align-items: center; */
        width: 100%;
        height: 100%;
        top: 10px;
        margin: 5px;
      }
      .list_modal_center {
        overflow: auto;
        opacity: 100%;
        width: 200px;
        height: 150px;
        border-style: solid;
        border-color: #646464;
        border-width: 0.5px;
        border-radius: 5px;
        padding: 10px;
        background-color: whiite;
        z-index: 2;
      }
      .pointer {
        cursor: pointer;
      }
      .liner {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
      }
      .all-file-place{
        display: flex;
        flex-direction: row;
      }
      .left-file-place{
        border-color: #646464;
        /* border-style: solid; */
        border-width: 0.5px;
        width: 150px;
        height: 50%;
      }
      .right-file-place{
        overflow-y: scroll;
        overflow-x: scroll;
        height: 76vh;
      }
      .right-file-place::-webkit-scrollbar {
        width: 10px;  
      }

      .right-file-place::-webkit-scrollbar-thumb {
        background: #A7ECEE; /* 스크롤바 색상 */
        border-radius: 10px; /* 스크롤바 둥근 테두리 */
      }

      .right-file-place::-webkit-scrollbar-track {
        /* background: rgba(220, 20, 60, .1); */
        /* display: none; */
      }

      .right-file-place::-webkit-scrollbar-corner {
	      background: transparent;
      }

      #file_upload{
        display: none;
      }
      .uploader{
        display: flex;
        justify-content: center;
        align-items: center;
        width: 80px;
        height: 30px;
        cursor: pointer;
        margin: 0;
        /* border-style: solid;
        border-color: black;
        border-width: 0.5px; */
      }
      .file-text{
        margin: 0;
      }
      .btn-sizing{
        height: 30px;
        width: 150px;
        border-style: solid;
        border-width: 0.5px;
        background-color: #A7ECEE;
        color: white;
        margin: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .btn-sizing2{
        height: 30px;
        width: 150px;
        border-style: solid;
        border-width: 0.5px;
        background-color: #00C4FF;
        color: white;
        margin: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .uploading_list{
        width: 150px;
        max-height: 150px;
        margin: 5px;
      }
      .file-list{
        list-style-type : none;
        word-wrap: break-word;
        max-height: 150px;
        overflow-y: scroll;
        margin: 0;
        padding: 0;
      }

      .list-item{
        border-style: solid;
        border-radius: 3px;
        border-color: rgb(194, 194, 194);
        border-width: 0.5px;
        background-color: #A7ECEE;
      }

      .file-list::-webkit-scrollbar {
        width: 0px;  
      }

      .file-list::-webkit-scrollbar-thumb {
        background: transparent;
        border-radius: 10px; /* 스크롤바 둥근 테두리 */
      }

      .file-list::-webkit-scrollbar-track {
        /* background: rgba(220, 20, 60, .1); */
        /* display: none; */
      }

      .file-list::-webkit-scrollbar-corner {
	      background: transparent;
      }

      .list_modal_center::-webkit-scrollbar {
        width: 0px;  
      }

      .list_modal_center::-webkit-scrollbar-thumb {
        background: transparent;
        border-radius: 10px; /* 스크롤바 둥근 테두리 */
      }

      .list_modal_center::-webkit-scrollbar-track {
        /* background: rgba(220, 20, 60, .1); */
        /* display: none; */
      }

      .list_modal_center::-webkit-scrollbar-corner {
	      background: transparent;
      }

      .loca-mover{
        display: flex;
        flex-direction: row;
      }
      #folder_location{
        border-radius: 5px;
        margin: 10px;
        border-style: none;
        outline: none;
      }
      .closer{
        text-align: end;
        margin-top: -10px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>


    <div class="main_container">
      <div class="head1 d-flex justify-content-between">
        <div class="head1-logo "><img src="/public/default/logo-removebg.png" style="width: 30px; height: 30px;"></img><span>CLAVI</span></div>
        <i class="head1-profile fa-solid fa-user " data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" style="color: white; "></i>
          <!-- <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Toggle right offcanvas</button> -->
      </div>
      <ul class="nav nav-tabs">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="/login"><i class="fa-solid fa-chalkboard-user"></i>  BOARD</a>
          
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#"><i class="fa-solid fa-chair"></i>  SEAT</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#"><i class="fa-solid fa-comments"></i>  MESSAGE</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#"><i class="fa-solid fa-book"></i>  NOTE</a>
        </li>
      </ul>

      <div class="dropdown nav-drop">
        <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
          MENU
        </button>
        <ul class="dropdown-menu">
          <li><button class="dropdown-item" type="button">BOARD</button></li>
          <li><button class="dropdown-item" type="button">SEAT</button></li>
          <li><button class="dropdown-item" type="button">MESSAGE</button></li>
          <li><button class="dropdown-item" type="button">NOTE</button></li>
        </ul>
      </div>

      <div class="main_content">
        <div class="all-file-place">
          <div class="left-file-place">
            <form onsubmit="fileupload(event)">
              <input type="file" name="file_upload" id="file_upload"  onchange='fileSelection(this)' multiple />
              <label for="file_upload">
                <div class="uploader btn btn-sizing2"><p class="file-text">파일선택</p></div>
              </label>
              <div class="uploading_list">
                <ul class="file-list"></ul>
              </div>
              <button class="btn-upload btn btn-sizing" type="submit">업로드</button>
            </form>
            <button type="button" class="btn btn-sizing" onclick="cancel()">선택취소</button>
            <button type="button" class="btn btn-sizing" onclick="folderCreate()">폴더생성</button>
            <button type="button" class="btn btn-sizing" onclick="selectAll()">전체선택</button>
            <button type="button" class="btn btn-sizing" onclick="erase()">삭제</button>
            <button type="button" class="btn btn-sizing" onclick="move()">이동</button>
            <div class="list_modal">
              <div class="list_modal_center">
                <div class="closer" onclick="closer()">x</div>
              </div>
            </div>
          </div>
          <div class="right-file-place">
            <div class="loca-mover" style="padding: 0 0 0 30px;">
              <h1 class="currentPlace">root</h1>
              <select id="folder_location" onchange="positionChange()">
                <option value="root">root</option>
              </select>
            </div>
            <div class="result"></div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="offcanvas offcanvas-end " tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
      <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasRightLabel"></h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body ">
        <div class="profile_img"><img src="/public/default/모래성.png" style="width: 200px;"></div>
        <br />
        <div class="offcanvas-menu ">
          <div class="my_page btn">마이페이지</div>
          <div class="planner btn">플래너</div>
          
          <a class="btn" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            클래스 변경하기
          </a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#">KDT 9기</a></li>
            <li><a class="dropdown-item" href="#">두환이네</a></li>
            <li><a class="dropdown-item" href="#">KDT 1기</a></li>
          </ul>
          <div class="logout btn" onclick="logout()">로그아웃</div>
        </div>
        
      </div>
    </div>

    <script>

      document.querySelectorAll('.button').forEach(button => button.innerHTML = '<div><span>' + button.textContent.trim().split('').join('</span><span>') + '</span></div>');
      const resultBox = document.querySelector('.result');
      let picture = ['jpg', 'png', 'jpeg', 'webp', 'gif'];
      let doc = {
        ppt: '../public/default/ppt.png',
        pptx: '../public/default/ppt.png',
        pdf: '../public/default/pdf.png',
        docx: '../public/default/word.png',
        doc: '../public/default/word.png',
        txt: '../public/default/txt.png',
        hwp: '../public/default/word.png',
        hwpx: '../public/default/word.png',
        xls: '../public/default/xls.png',
        zip: '../public/default/zip.png',
        folder: '../public/default/folder.png',
      };
      let database = [];
      let lastnum = 0;
      let useBox = [];
      // {
      //   filename: folderName,
      //   fileLoca: fadeffwe,
      //   files: [{
      //     filename: ddefsd,
      //     fileLoca: fadeffwe,
      //     files: []
      //     parent : wfewff,
      //   }]
      //   parent : wfewff
      // }
      const elementGenerator = (arr) => {
        let where = document.querySelector('#folder_location');
        let folderPlace = where.options[where.selectedIndex].value;
        let wide = document.querySelector('.result');
        wide.innerHTML = '';
        useBox = [];
        console.log(database);
        document.querySelector('.currentPlace').innerText = folderPlace;
        let line = document.createElement('div');
        line.classList.add('liner');
        for (let i = 0; i < arr.length; i++) {
          if (arr[i].parent == folderPlace) {
            let div = document.createElement('div');
            let div2;
            console.log(arr[i].filename)
            if (arr[i].filename.includes('.')) {
              // 파일
              div2 = document.createElement('a');
              div2.innerText = arr[i].filename;
              div2.href = arr[i].fileLoca;
              div2.classList.add('overflow');
              let ext = arr[i].filename.split('.')[1];
              if (picture.includes(ext)) {
                let img = document.createElement('img');
                img.src = arr[i].fileLoca;
                img.style.cssText = `
              width: 100%;
            `;
                div.appendChild(img);
              } else if (doc[ext]) {
                let img = document.createElement('img');
                img.src = doc[ext];
                img.style.cssText = `
              width: 70%;
            `;
                div.appendChild(img);
              } else {
                let img = document.createElement('img');
                img.src = doc['file'];
                img.style.cssText = `
                    width: 100%;
                  `;
                div.appendChild(img);
              }
            } else {
              // 폴더
              div2 = document.createElement('div');
              div2.innerText = arr[i].filename;
              div2.onclick = (e) => {
                e.preventDefault();
                document.querySelector('.result').innerHTML = '';
                where.value = arr[i].filename;
                document.querySelector('.currentPlace').innerText =
                  arr[i].filename;
                elementGenerator(database);
              };
              div2.classList.add('overflow');
              let img = document.createElement('img');
              img.src = doc['folder'];
              img.style.cssText = `
                    width: 100%;
                  `;
              div.appendChild(img);
            }
            let div3 = document.createElement('div');
            div.classList.add('element');
            div.onclick = () => {
              if (div.classList.contains('clicked')) {
                div.classList.remove('clicked');
                for (let j = 0; j < useBox.length; j++) {
                  if (useBox[j] == arr[i].filename) {
                    useBox.splice(j, 1);
                    console.log(useBox);
                  }
                }
              } else {
                div.classList.add('clicked');
                useBox.push(arr[i].filename);
                console.log(useBox);
              }
            };
            div3.classList.add('wrapper');
            div3.style.cursor = 'pointer';
            div3.appendChild(div);
            div3.appendChild(div2);
            wide.appendChild(div3);
            // if (line.children.length < 9) {
            //   line.appendChild(div3);
            //   console.log(line.children.length);
            // } else {
            //   wide.appendChild(line);
            //   console.log(wide);
            //   line = document.createElement('div');
            //   // line.classList.add('liner');
            //   // line.appendChild(div3);
            //   wide.appendChild(line);
            // }
          }
        }
        // if (line.children.length !== 0) {
        //   wide.appendChild(line);
        // }
      };

      // {
      //   filename: folderName,
      //   fileLoca: fadeffwe,
      //   files: [{
      //     filename: ddefsd,
      //     fileLoca: fadeffwe,
      //     files: []
      //     parent : wfewff,
      //   }]
      //   parent : wfewff
      //
      // }
      axios({
        method: 'get',
        url: '/get_noteManager',
      }).then((res) => {
        console.log(res.data.data);
        let list = document.querySelector('#folder_location');
        let modal = document.querySelector('.list_modal_center');
        modal.innerHTML += `<div class="pointer" onclick="move2()" value="root"> root </div>`;
        for (let i = 0; i < res.data.data.length; i++) {
          if (res.data.data[i].isFolder == true) {
            list.innerHTML += `<option value="${res.data.data[i].filename}">${res.data.data[i].filename}</option>`;
            modal.innerHTML += `<div class="pointer" onclick="move2()" value="${res.data.data[i].filename}"> ${res.data.data[i].filename} </div>`;
          }
          let obj = {
            id: res.data.data[i].id,
            filename: res.data.data[i].filename,
            fileLoca: res.data.data[i].location,
            files: [],
            parent: res.data.data[i].parent,
          };
          console.log(obj)
          database.push(obj);
        }
        elementGenerator(database);
      });

      const fileupload = async (event) => {
        let folder = document.querySelector('#folder_location');
        let folderPlace = folder.options[folder.selectedIndex].value;
        console.log(folderPlace)
        event.preventDefault();
        const file = document.querySelector('#file_upload');
        const formData = new FormData();
        if (file.files.length == 0) {
          alert('파일을 선택해주세요');
          return;
        }
        for (let i = 0; i < file.files.length; i++) {
          console.log(file.files[i]);
          formData.append('folder_location', folderPlace);
          formData.append('file_upload', file.files[i]);
        }
        let res = await axios({
          method: 'POST',
          url: '/noteManager/upload',
          data: formData,
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        if (res.data.status == '성공') {
          alert('파일 업로드에 성공했습니다');
          document.querySelector(".file-list").innerHTML = ""
          for (let i = 0; i < res.data.files.length; i++) {
            let obj = {
              filename: res.data.files[i].name,
              fileLoca: res.data.files[i].location,
              files: [],
              parent: folderPlace,
            };
            console.log(obj)
            database.push(obj);
          }
          elementGenerator(database);
        } else if (res.data.status == '중복') {
          alert('같은 이름의 파일이 존재합니다');
        } else {
          alert('파일 업로드에 실패했습니다');
        }
      };

      const folderCreate = async () => {
        let folder = document.querySelector('#folder_location');
        let folderPlace = folder.options[folder.selectedIndex].value;
        let prompt = window.prompt('폴더 이름을 지어주세요');
        let obj = {
          filename: prompt,
          parent: folderPlace,
        };
        let res = await axios({
          method: 'POST',
          url: '/noteManager/upload_folder',
          data: obj,
        });
        if (res.data == '성공') {
          alert('폴더를 생성하였습니다');
          let obj = {
            filename: prompt,
            fileLoca: null,
            files: [],
            parent: folderPlace,
          };
          database.push(obj);
          let list = document.querySelector('#folder_location');
          let modal = document.querySelector('.list_modal_center');
          list.innerHTML += `<option value="${prompt}">${prompt}</option>`;
          modal.innerHTML += `<div class="pointer" onclick="move2()" value="${prompt}">${prompt} </div>`;
          folder.value = folderPlace;
          elementGenerator(database);
        } else if (res.data == '중복') {
          alert('같은 이름의 폴더가 존재합니다');
        } else {
          alert('폴더 생성에 실패하였습니다');
        }
      };

      const positionChange = () => {
        elementGenerator(database);
      };

      const selectAll = () => {
        let all = document.querySelector('.result');
        let flag = 0;
        for (let i = 0; i < all.children.length; i++) {
          // for (let j = 0; j < all.children[i].children.length; j++) {
          //   if (
          //     !all.children[i].children[j].children[0].classList.contains(
          //       'clicked',
          //     )
          //   ) {
          //     flag++;
          //     all.children[i].children[j].children[0].classList.add('clicked');
          //     useBox.push(all.children[i].children[j].children[1].innerText);
          //   }
          // }
          if (
              !all.children[i].children[0].classList.contains(
                'clicked',
              )
            ) {
              flag++;
              all.children[i].children[0].classList.add('clicked');
              useBox.push(all.children[i].children[1].innerText);
            }
        }
        console.log(useBox);
        if (flag == 0) {
          for (let i = 0; i < all.children.length; i++) {
            // for (let j = 0; j < all.children[i].children.length; j++) {
            //   all.children[i].children[j].children[0].classList.remove(
            //     'clicked',
            //   );
            //   allClick = false;
            // }
            all.children[i].children[0].classList.remove(
                'clicked',
              );
              allClick = false;
          }
          useBox = [];
          console.log(useBox);
        }
      };

      const erase = async () => {
        let res = await axios({
          method: 'delete',
          url: '/noteManager/erase_files',
          data: useBox,
        });
        if (res.data == '성공') {
          alert('선택된 파일이 삭제되었습니다');
          for (let i = 0; i < database.length; i++) {
            for (let j = 0; j < useBox.length; j++) {
              if (database[i].filename == useBox[j]) {
                database.splice(i, 1);
              }
            }
          }
          useBox = [];
          window.location.reload();
        } else {
          alert('파일 삭제에 실패하였습니다');
        }
      };

      const move = () => {
        let arr = [];
        let list = document.querySelector('#folder_location');
        for (let i = 0; i < list.children.length; i++) {
          arr.push(list.children[i].innerText);
        }
        document.querySelector('.list_modal').style.display = 'flex';
        console.log(arr);
      };

      // document.querySelector('body').addEventListener('click', (e) => {
      //   console.log(e.target)
      //   console.log(e.currentTarget)
      //   if (e.target == e.currentTarget) {
      //     document.querySelector('.list_modal').style.display = 'none';
      //   }
      // });

      const closer = () => {
        document.querySelector('.list_modal').style.display = 'none';
      }

      const move2 = async () => {
        let data = {
          movers: useBox,
          to: event.currentTarget.innerText,
        };
        let res = await axios({
          method: 'patch',
          url: '/noteManager/patch_files',
          data: data,
        });
        if (res.data == '성공') {
          alert('파일을 성공적으로 이동했습니다');
          window.location.reload();
        } else {
          alert('파일 이동에 실패했습니다');
        }
      };

      const fileSelection = (files) => {
        console.log(files.files)
        document.querySelector(".file-list").innerHTML = ''
        for(let i = 0; i < files.files.length; i++)
        
        {document.querySelector(".file-list").innerHTML += `<li class="list-item">${files.files[i].name}</li>`}
      }

      const cancel = () => {
        $('#file_upload').val('');
        document.querySelector(".file-list").innerHTML = ''
      }
    </script>
  </body>
</html>
