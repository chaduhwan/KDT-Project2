<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- axios 링크 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- css , icon라이브러리 -->
    <link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css" />
    <script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>
    <link
    rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <script src="https://kit.fontawesome.com/1a34eeff0c.js"crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous" ></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <!-- 폰트 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=ADLaM+Display&family=Jua&family=Monoton&display=swap" rel="stylesheet">
    <!-- 부트스트랩cdn -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script> -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"rel="stylesheet"integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx"crossorigin="anonymous"/>
    <!-- css 연결 -->
    <link rel="stylesheet" href="/public/css/classMain.css" />
    <link rel="stylesheet" href="/public/css/board.css" />
    <link rel="stylesheet" href="/public/css/placeSearch.css" />
        <!-- 소켓io 경로 -->
        <script src="/socket.io/socket.io.js"></script>
    <title>Document</title>
    <style>
        .for:hover {
          background-color: white;
          border-radius: 3px;
          border-style: solid;
          border-width: 1px;
          box-sizing: border-box;
          border-color: #e4e7ee;
          cursor: pointer;
        }
      </style>
</head>
<body>
    
    <div class="main_container">
        <div class="head1 d-flex justify-content-between">
          <div class="head1-logo "><img src="/public/default/logo-removebg.png" style="width: 30px; height: 30px;"></img><span>CLAVI</span></div>
          <i class="head1-profile fa-solid fa-user " data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" style="color: white; "></i>
            <!-- <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Toggle right offcanvas</button> -->
        </div>
        <ul class="nav nav-tabs dropup">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="/board"><i class="fa-solid fa-chalkboard-user"></i>  BOARD</a>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown  dropdown-toggle" data-bs-toggle="dropdown" role="button" aria-expanded="false"><i class="fa-solid fa-chair"></i>  SEAT</a>
              <ul class="dropdown-menu" style="min-width: fit-content;
              width: 120px; ">
                <li><a class="dropdown-item" href="/desk/reservation">자리 예약</a></li>
                <li><a class="dropdown-item" href="/desk/generator">자리 배치</a></li>
              </ul>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/chat"><i class="fa-solid fa-comments"></i>  MESSAGE</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/noteManager"><i class="fa-solid fa-book"></i>  NOTE</a>
            </li>
          </ul>
    
          <div class="dropdown nav-drop">
            <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
              MENU
            </button>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" type="button" href="/board">BOARD</a></li>
              <li><a class="dropdown-item" type="button" href="/desk/reservation"  >SEAT</a></li>
              <li><a class="dropdown-item" type="button" href="/chat" >MESSAGE</a>
              </li>
              <li><a class="dropdown-item" type="button" href="/noteManager" >NOTE</a></li>
            </ul>
          </div>
        <div class="main_content">
            <header class="board-hearder">
                <form  class="search-bar" name="board-search">
                    <button type="button" class="search-button" onclick="boardSearch()">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </button>
                    <select id="search_select">
                        <option value="title">제목</option>
                        <option value="content">내용</option>
                        <option value="tag">태그</option>
                    </select>
                    <input type="text" name="searchBar" placeholder="검색어를 입력해주세요">
                </form>
                <div class="subject-object" onclick="Allboard()"># 모든글</div>
                <% for (let i = 0; i < subjectId.length; i++) { %>
                    <div class="subject-object" data-subject-id="<%= subjectId[i] %>" onclick="enterSubject(this)"># <%= subjectTitle[i] %></div>
                    <% } %>
                    <% if(userType == "leader" ){ %>
                    <div class="readerOnly">
                        <div id="makeNotice"> * Leader에게만 보이는 항목입니다 </div>
                        <form class="subject-List" name="subjectList">
                            <input type="text" name="SubjectTitle" placeholder="게시판 제목">
                            <button type="button" class="subject-button" onclick="SubjectMake()">
                                <i class="fa-solid fa-plus"></i>
                            </button>
                        </form>
                    </div>
                <% } %>
            </header>
            <div class="board-container">
                <main class="board-main">
                    <% for (let i = 0 ; i < data.length ; i ++) {%>
                    <div class="board-object" data-board-id="<%=data[i].BoardId%>" onclick="boardDetail(this)">
                            <div class="board-high">
                                <span id="borad-ID" hidden>등록번호 : <%=data[i].BoardId%></span>
                                <span class="board-title"><%=data[i].title%></span>
                            </div>
                            <div class="board-mid">
                                <img class="board-writer-img" src="<%=data[i].place%>">
                                <span class="board-writer"> <%=data[i].writer%></span>
                                <span class="board-date"> <%=data[i].date%></span>
                            </div>
                            <span class="board-content"> <%=data[i].content%></span>
                            <div class="board-bottom">
                                <span class="board-tag"> 태그 : <%=data[i].tag%></span>
                                <button type="button" class="boardLike" value="<%=data[i].BoardId%>" onclick="BoardLike(this)">
                                    <i class="fa-regular fa-thumbs-up"> <%=likeArr[i]%></i>
                                </button>
                            </div>
                        </div>
                                <%}%>
                            </main>
                     <button id="btn-modal">
                        <div></div>
                        <div>
                            함께 나누고픈 의견이 있나요?
                        </div>
                        <i class="fa-regular fa-comments"></i>
                            
                    </button>
            </div>
            </div>
            <div id="modal" class="modal-overlay">
                <div class="modal-window">
                    <form name="board-write">
                        <div class="modal-input">
                            <input type="text" name="title" placeholder="제목을 입력해주세요">
                            <input type="text" name="tag" placeholder="태그를 입력해주세요">
                            <button class="board-tag-add" onclick="boardTag()">
                                <i class="fa-solid fa-tags"></i>
                            </button>
                            <button type="button" class="board-onWrite" onclick="boardWrite()">
                                <i class="fa-solid fa-pen-to-square"></i>
                            </button>
                        </div>
                        <div class="write-tag-bar"></div>
                        <div id="searchModal">
                            <div id="closeBtn">&times;</div>
                            <div class="map_wrap" id="map_wrap">
                              <div id="map"></div>
                              <div id="menu_wrap" class="bg_white">
                                <div class="option">
                                  <div>
                                    키워드 :
                                        <input type="text" value="재모식당" id="keyword" size="15" />
                                        <button type="button" onclick="searchPlaces()">검색하기</button>
                                  </div>
                                </div>
                                <hr />
                                <ul id="placesList"></ul>
                                <div id="pagination"></div>
                              </div>
                            </div>
                          </div>
                        <div id="editor"></div>
                    </form> 
                </div>
            </div>
    </div> 

    <div class="offcanvas offcanvas-end " tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
        <div class="offcanvas-header">
          <h5 class="offcanvas-title" id="offcanvasRightLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body ">
          <div class="profile_img" id="profile_img"></div>
          <br />
          <div class="offcanvas-menu ">
            <div class="my_page btn" >마이페이지</div>
            <div class="planner btn">플래너</div>
            
            <a class="btn" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              클래스 변경하기
            </a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#">KDT 9기</a></li>
              <li><a class="dropdown-item" href="#">두환이네</a></li>
              <li><a class="dropdown-item" href="#">KDT 1기</a></li>
            </ul>
            <div class="logout btn" onclick="logout()">로그아웃</div>
          </div>
          
        </div>
      </div>
        <!-- 카카오 맵 cdn  -->
    <script
    type="text/javascript"
    src="//dapi.kakao.com/v2/maps/sdk.js?appkey=cccdfeee839e396115f84e87ae5be2dc&libraries=services"
  ></script>
        <!-- <script src="/public/placeSearch2.js"></script> -->
          <script src="/public/js/header.js"></script>
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>
      <!-- placeSearch2.js -->
      <script>
                //선택한 장소의 정보
        let placeId = '';
        let placeName = '';
        let placeAddress = '';
        let placeLati;
        let placeLogi;

        //유저의 현재 위치 가져오기
        //위도 latitude/ 경도 longitude
        

        // 마커를 담을 배열
        let markers = [];

        let mapContainer = document.getElementById('map'), // 지도를 표시할 div
        mapOption = {
            // center: new kakao.maps.LatLng(lati, longi), // 지도의 중심좌표
            center: new kakao.maps.LatLng(37.566826, 126.9786567),
            level: 3, // 지도의 확대 레벨
        };

        // 지도생성
        let map = new kakao.maps.Map(mapContainer, mapOption);

        // 장소 검색 객체 생성
        let ps = new kakao.maps.services.Places();

        // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우
        let infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });

        // 키워드로 장소 검색
        searchPlaces();

        function searchPlaces() {
        //랜더링 오류해결
        setTimeout(function () {
            map.relayout();
        }, 1000);

        infowindow.close(); //인포윈도우 초기화
        let keyword = document.getElementById('keyword').value;
        if (!keyword.replace(/^\s+|\s+$/g, '')) {
            //공백방지
            alert('키워드를 입력해주세요!');
            return false;
        }
        // 장소검색 객체를 통해 키워드로 장소검색을 요청
        ps.keywordSearch(keyword, placesSearchCB);
        }

        // 장소검색이 완료됐을 때 호출되는 콜백
        function placesSearchCB(data, status, pagination) {
        if (status === kakao.maps.services.Status.OK) {
            // 정상적으로 검색이 완료됐으면 검색 목록과 마커를 표출

            //검색한 장소의 데이터 받아오기
            // for (let i = 0; i < data.length; i++) {
            //     let id = data[i].id; // 주소 검색 결과의 ID
            //     let name = data[i].place_name; // 장소명
            //     let address = data[i].address_name; // 주소
            //     console.log(id, name, address)
            // }

            displayPlaces(data);

            // 페이지 번호 표출
            displayPagination(pagination);
        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
            alert('검색 결과가 존재하지 않습니다.');
            return;
        } else if (status === kakao.maps.services.Status.ERROR) {
            alert('검색 결과 중 오류가 발생했습니다.');
            return;
        }
        }

        // 검색 결과 목록과 마커를 표출하는 함수
        function displayPlaces(places) {
        let listEl = document.getElementById('placesList'),
            menuEl = document.getElementById('menu_wrap'),
            fragment = document.createDocumentFragment(),
            bounds = new kakao.maps.LatLngBounds(),
            listStr = '';

        // 검색 결과 목록에 추가된 항목들을 제거
        removeAllChildNods(listEl);

        // 지도에 표시되고 있는 마커를 제거
        removeMarker();

        for (let i = 0; i < places.length; i++) {
            // 마커를 생성하고 지도에 표시
            let placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
            marker = addMarker(placePosition, i),
            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성

            //장소 정보
            placeId = places[i].id; // 주소 검색 결과의 ID
            placeName = places[i].place_name; // 장소명
            placeAddress = places[i].address_name; // 주소
            placeLati = places[i].y; //위도
            placeLogi = places[i].x; //경도

            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해 LatLngBounds 객체에 좌표를 추가
            bounds.extend(placePosition);

            // 마커와 검색결과 항목에 mouseover 했을때
            // 해당 장소에 인포윈도우에 장소명을 표시
            // mouseout 했을 때는 인포윈도우를 닫음
            (function (marker, title) {
            kakao.maps.event.addListener(marker, 'click ', function () {
                map.panTo(placePosition);
                map.setLevel(2);
                displayInfowindow(marker, title, placeId, placeName);
            });
            // kakao.maps.event.addListener(marker, 'blur', function () {
            //     infowindow.close();
            // });
            //목록의 장소 클릭하면 지도 이동+마커 표시
            itemEl.onclick = function () {
                map.panTo(placePosition);
                map.setLevel(2);
                displayInfowindow(marker, title, placeId, placeName);
                console.log(placeId, placeName, placeAddress);
            };
            // itemEl.onmouseout = function () {
            //     infowindow.close();
            // };
            })(marker, places[i].place_name);
            fragment.appendChild(itemEl);
        }

        // 검색결과 항목들을 검색결과 목록 Element에 추가
        listEl.appendChild(fragment);
        menuEl.scrollTop = 0;

        // 검색된 장소 위치를 기준으로 지도 범위를 재설정
        map.setBounds(bounds);
        }

        // 검색결과 항목을 Element로 반환하는 함수
        function getListItem(index, places) {
        let el = document.createElement('li'),
            itemStr =
            '<span class="markerbg marker_' +
            (index + 1) +
            '"></span>' +
            '<div class="info">' +
            '   <h5>' +
            places.place_name +
            '</h5>';

        if (places.road_address_name) {
            itemStr +=
            '    <span>' +
            places.road_address_name +
            '</span>' +
            '   <span class="jibun gray">' +
            places.address_name +
            '</span>';
        } else {
            itemStr += '    <span>' + places.address_name + '</span>';
        }

        itemStr += '  <span class="tel">' + places.phone + '</span>' + '</div>';

        el.innerHTML = itemStr;
        el.className = 'item';

        // el.onclick = function () {
        //     map.panTo(new kakao.maps.LatLng(places.y, places.x));
        //     map.setLevel(5);
        // };

        return el;
        }

        // 마커를 생성하고 지도 위에 마커를 표시하는 함수
        function addMarker(position, idx, title) {
        let imageSrc =
            'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url
            imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기
            imgOptions = {
            spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
            spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
            offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표
            },
            markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
            marker = new kakao.maps.Marker({
            position: position, // 마커의 위치
            image: markerImage,
            clickable: true,
            });

        marker.setMap(map); // 지도 위에 마커를 표출
        markers.push(marker); // 배열에 생성된 마커를 추가

        return marker;
        }

        // 지도 위에 표시되고 있는 마커를 모두 제거
        function removeMarker() {
        for (let i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        markers = [];
        }

        // 검색결과 목록 하단에 페이지번호를 표시하는 함수
        function displayPagination(pagination) {
        let paginationEl = document.getElementById('pagination'),
            fragment = document.createDocumentFragment(),
            i;

        // 기존에 추가된 페이지번호를 삭제
        while (paginationEl.hasChildNodes()) {
            paginationEl.removeChild(paginationEl.lastChild);
        }

        for (i = 1; i <= pagination.last; i++) {
            let el = document.createElement('a');
            el.href = '#';
            el.innerHTML = i;

            if (i === pagination.current) {
            el.className = 'on';
            } else {
            el.onclick = (function (i) {
                return function () {
                pagination.gotoPage(i);
                };
            })(i);
            }

            fragment.appendChild(el);
        }
        paginationEl.appendChild(fragment);
        }

        // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수
        // 인포윈도우에 장소명을 표시
        function displayInfowindow(marker, title, id, name) {
        // https://place.map.kakao.com/622222463
        let kakaoMapURL = `https://place.map.kakao.com/${id}`;
        let content =
            `<div class='infowindow' >` +
            title +
            '</div>' +
            '<a style="margin:5px; color: blue;" href="' +
            kakaoMapURL +
            '" target="_blank">자세히보기</a><br/>' +
            '<button style="margin:5px" type=button onclick="selectPlace()" >첨부하기</button>';
        infowindow.setContent(content);
        infowindow.open(map, marker);
        }

        // 검색결과 목록의 자식 Element를 제거하는 함수
        function removeAllChildNods(el) {
        while (el.hasChildNodes()) {
            el.removeChild(el.lastChild);
        }
        }

        const modal = $('#searchModal');
        const closeBtn = $('#closeBtn');

        function showSearchPlaces() {
        modal.css('display', 'flex');
        }

        //모달 종료
        closeBtn.click(function () {
        console.log('닫기');
        modal.css('display', 'none');
        });

        async function selectPlace() {
        event.preventDefault();
        console.log(placeId, placeName, placeAddress);
        await axios({
            method: 'POST',
            url: 'bob/select',
            data: {
            placeId,
            placeName,
            placeAddress,
            placeLati,
            placeLogi,
            },
        });
        modal.css('display', 'none');
        // 이미지 지도에 표시할 마커입니다
        let marker2 = {
            position: new kakao.maps.LatLng(placeLati, placeLogi),
            text: `${placeName}`, // 마커에 표시할 텍스트
        };
        let mapper = document.createElement('div');
        mapper.style.cssText = `    
            width: 300px;
            height: 300px;
        `;
        let switcher = document.querySelector('.toastui-editor-mode-switch');
        //   switcher.children[0].classList.remove('active');
        switcher.children[1].classList.add('manipulate');
        switcher.children[0].classList.add('manipulate2');
        $(document).ready(function () {
            $('.manipulate').trigger('click');
        });

        let here = document.querySelector('.toastui-editor-ww-container').children[0]
            .children[0].children[0];
        let showmaker = document.createElement('img');
        //   showmaker.src = staticMapContainer2.children[0].children[0].src;
        showmaker.contentEditable = false;
        showmaker.classList.add('mapper');
        showmaker.style.cssText = `    
        width: 300px;
        height: 300px;
        `;
        let showmaker2 = document.createElement('img');
        showmaker2.classList.add('ProseMirror-separator');
        here.append(showmaker);
        here.append(showmaker2);
        let staticMapContainer2 = document.querySelector('.mapper');
        let staticMapOption = {
            center: new kakao.maps.LatLng(placeLati, placeLogi), // 이미지 지도의 중심좌표
            level: 3, // 이미지 지도의 확대 레벨
            marker: marker2, // 이미지 지도에 표시할 마커
        };
        // 이미지 지도를 생성합니다
        let staticMap = new kakao.maps.StaticMap(
            staticMapContainer2,
            staticMapOption,
        );
        }
        </script>
</body>
<script>
          //소켓io
          const socket = io();
    var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'))
    var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
            return new bootstrap.Dropdown(dropdownToggleEl)
        })
        if(document.querySelector(".board-main").hasChildNodes){

            for(let i = 0; i < document.querySelector(".board-main").children.length; i++){
                    let temp = document.querySelector(".board-main").children[i].children[2].innerText 
                    document.querySelector(".board-main").children[i].children[2].innerText = ""
                    let arr = Array.from(format(temp))
                for(let j = 0; j < arr.length; j++){
                     document.querySelector(".board-main").children[i].children[2].appendChild(arr[j])   
        }}}
        
    function boardDetail(element) {
        const boardid = element.getAttribute('data-board-id');
        axios({
            method : 'GET',
            url : `/board/detail?boardId=${boardid}`,
            params :{ boardId : boardid}
        }).then(
            window.location.href=`/board/detail?boardId=${boardid}`
        )
    }

    async function SubjectMake() {
        const form = document.forms['subjectList']
        const result = await axios({
            method : 'POST',
            url : '/subject/make',
            data : {subjectTitle:form.SubjectTitle.value}
        })
        window.location.reload()
    }
  let subjectIs = false;
    async function enterSubject(element) {
        subjectIs = true;
        const SubjectId = element.getAttribute('data-subject-id');
         const res = await axios({
            method:'POST',
            url :'/subject/enter',
            data :{SubjectId}
        })
        const mainElement = document.querySelector('.board-main'); // main 요소를 선택합니다.
            while (mainElement.firstChild) {
                mainElement.removeChild(mainElement.firstChild);
            }

            console.log(res.data.data)
            for (let i = 0 ; i < res.data.data.length; i++) {
                const div = document.createElement('div')
                div.classList.add('board-object')
                div.setAttribute('data-board-id', `${res.data.data[i].BoardId}`)
                div.onclick = function() {
                boardDetail(this);};

                const boardHigh = document.createElement('div')
                boardHigh.classList.add('board-high')
                const boardMid = document.createElement('div')
                boardMid.classList.add('board-mid')
                const boardBottom = document.createElement('div')
                boardBottom.classList.add('board-bottom')

                const span1 = document.createElement('span');
                span1.textContent = ``;
                span1.id = 'board-ID'

                const span2 = document.createElement('span');
                span2.textContent= `${res.data.data[i].title}`
                span2.className = 'board-title'

                const span3 = document.createElement('span');
                span3.textContent= `${res.data.data[i].date}`
                span3.className = 'board-date'

                const img = document.createElement('img')
                img.src = `${res.data.data[i].place}`
                img.className = 'board-writer-img'

                const span4 = document.createElement('span');
                span4.textContent= `${res.data.data[i].writer}`
                span4.className = 'board-writer'

                const span5 = document.createElement('span');
                let arr = Array.from(format(`${res.data.data[i].content}`))
                for(let j = 0; j < arr.length; j++){
                     span5.appendChild(arr[j])
                    }
                span5.className = 'board-content'

                const span6 = document.createElement('span');
                span6.textContent= `태그 : ${res.data.data[i].tag}`
                span6.className = 'board-tag'

                const button = document.createElement('button')
                button.value =  `${res.data.data[i].BoardId}`
                button.className = 'boardLike'
                button.onclick = function(){
                    BoardLike(this)
                }
                const icon = document.createElement('i')
                icon.className ="fa-regular fa-thumbs-up"
                icon.innerText= `${res.data.likeArr[i]}`
                button.appendChild(icon)

                boardHigh.appendChild(span1)
                boardHigh.appendChild(span2)

                boardMid.appendChild(img)
                boardMid.appendChild(span4)
                boardMid.appendChild(span3)

                boardBottom.appendChild(span6)
                boardBottom.appendChild(button)

                div.appendChild(boardHigh)
                div.appendChild(boardMid)
                div.appendChild(span5)
                div.appendChild(boardBottom)

                const main = document.querySelector('.board-main')
                main.appendChild(div)
                subjectIs = res.data.subjectIs
                console.log(subjectIs)
            }
    }

    let tagAdd = []
     function boardTag() {
        event.preventDefault()
        const form = document.forms['board-write']
        const bar = document.querySelector('.write-tag-bar')

        const div = document.createElement('div')
        div.textContent = `: ${form.tag.value}`;
        div.classList.add('tag-object')

        bar.appendChild(div)

        tagAdd.push(form.tag.value)

         console.log(tagAdd)
        form.tag.value="";
    }

    async function boardWrite() {
        const form = document.forms['board-write']
        const now = new Date();
        const year = now.getFullYear()
        const month = now.getMonth()+1;
        const day = now.getDate();
        const hour = now.getHours();
        const min = now.getMinutes();

        const data = {
            title : form.title.value,
            date : `${year}년 ${month}월 ${day}일 ${hour}:${min}`,
            writer : '<%=user %>',
            content : editor.getHTML(),
            tag : tagAdd.map(tag => `#${tag}`).join(' ')
        }
        const res =  await axios ({
            method : 'POST',
            url : '/board/write',
            data : data
        })
        tagAdd.length = 0;
            console.log(res.data.data)
            for (let i = 0 ; i < res.data.data.length; i++) {
                const div = document.createElement('div')
                div.classList.add('board-object')
                div.setAttribute('data-board-id', `${res.data.data[i].BoardId}`)
                div.onclick = function() {
                boardDetail(this);};

                const boardHigh = document.createElement('div')
                boardHigh.classList.add('board-high')
                const boardMid = document.createElement('div')
                boardMid.classList.add('board-mid')
                const boardBottom = document.createElement('div')
                boardBottom.classList.add('board-bottom')

                const span1 = document.createElement('span');
                span1.textContent = ``;
                span1.id = 'board-ID'

                const span2 = document.createElement('span');
                span2.textContent= `${res.data.data[i].title}`
                span2.className = 'board-title'

                const span3 = document.createElement('span');
                span3.textContent= `${res.data.data[i].date}`
                span3.className = 'board-date'

                const img = document.createElement('img')
                img.src = `${res.data.data[i].place}`
                img.className = 'board-writer-img'

                const span4 = document.createElement('span');
                span4.textContent= `${res.data.data[i].writer}`
                span4.className = 'board-writer'

                const span5 = document.createElement('span');
                let arr = Array.from(format(`${res.data.data[i].content}`))
                for(let j = 0; j < arr.length; j++){
                     span5.appendChild(arr[j])
                    }
                span5.className = 'board-content'

                const span6 = document.createElement('span');
                span6.textContent= `태그 : ${res.data.data[i].tag}`
                span6.className = 'board-tag'

                const button = document.createElement('button')
                button.value =  `${res.data.data[i].BoardId}`
                button.className = 'boardLike'
                button.onclick = function(){
                    BoardLike(this)
                }
                const icon = document.createElement('i')
                icon.className ="fa-regular fa-thumbs-up"
                icon.innerText= `${res.data.likeArr[i]}`    
                button.appendChild(icon)

                boardHigh.appendChild(span1)
                boardHigh.appendChild(span2)

                boardMid.appendChild(img)
                boardMid.appendChild(span4)
                boardMid.appendChild(span3)

                boardBottom.appendChild(span6)
                boardBottom.appendChild(button)

                div.appendChild(boardHigh)
                div.appendChild(boardMid)
                div.appendChild(span5)
                div.appendChild(boardBottom)

                const main = document.querySelector('.board-main')
                main.appendChild(div)
            }

            const writeTagBar = document.querySelector('.write-tag-bar');
            // write-tag-bar의 모든 자식 요소를 삭제
                while (writeTagBar.firstChild) {
                    writeTagBar.removeChild(writeTagBar.firstChild);
                }
                const textIput = document.querySelector('.ProseMirror');
            // write-tag-bar의 모든 자식 요소를 삭제
                while (textIput.firstChild) {
                    textIput.removeChild(textIput.firstChild);
                }
            form.reset()
            modal2.style.display = "none"
    }

    function BoardLike(button) {
        event.stopPropagation();
        const buttonValue = button.value;
        console.log(`버튼의 value: ${buttonValue}`);
            axios({
                method :'POST',
                url :'/board/like',
                data : {id : '<%=userid%>',BoardId : buttonValue}
            }).then(res=> {
                if (res.data.result==true) {
                    button.children[0].innerText =`${res.data.cou}`
                } else {
                    alert("이미 좋아요한 게시글입니다.!")
                }
        });
        }
    
    function boardSearch() {
        const form = document.forms['board-search']
        const searchValue = document.querySelector('#search_select')
        const data = {
            searchValue : searchValue.value, 
            searchBar : form.searchBar.value
        }
        console.log(data)
        axios ({
            method: 'POST',
            url : '/board/search',
            data : data
        }).then(res=>{
            const mainElement = document.querySelector('.board-main'); // main 요소를 선택합니다.
            while (mainElement.firstChild) {
                mainElement.removeChild(mainElement.firstChild);
            }

            console.log(res.data.data)
            for (let i = 0 ; i < res.data.data.length; i++) {
                const div = document.createElement('div')
                div.classList.add('board-object')
                div.setAttribute('data-board-id', `${res.data.data[i].BoardId}`)
                div.onclick = function() {
                boardDetail(this);};

                const boardHigh = document.createElement('div')
                boardHigh.classList.add('board-high')
                const boardMid = document.createElement('div')
                boardMid.classList.add('board-mid')
                const boardBottom = document.createElement('div')
                boardBottom.classList.add('board-bottom')

                const span1 = document.createElement('span');
                span1.textContent = ``;
                span1.id = 'board-ID'

                const span2 = document.createElement('span');
                span2.textContent= `${res.data.data[i].title}`
                span2.className = 'board-title'

                const span3 = document.createElement('span');
                span3.textContent= `${res.data.data[i].date}`
                span3.className = 'board-date'

                const span4 = document.createElement('span');
                span4.textContent= `${res.data.data[i].writer}`
                span4.className = 'board-writer'

                const img = document.createElement('img')
                img.src = `${res.data.data[i].place}`
                img.className = 'board-writer-img'

                const span5 = document.createElement('span');
                let arr = Array.from(format(`${res.data.data[i].content}`))
                for(let j = 0; j < arr.length; j++){
                     span5.appendChild(arr[j])
                    }
                span5.className = 'board-content'

                const span6 = document.createElement('span');
                span6.textContent= `태그 : ${res.data.data[i].tag}`
                span6.className = 'board-tag'

                const button = document.createElement('button')
                button.value =  `${res.data.data[i].BoardId}`
                button.className = 'boardLike'
                button.onclick = function(){
                    BoardLike(this)
                }
                const icon = document.createElement('i')
                icon.className ="fa-regular fa-thumbs-up"
                icon.innerText= `${res.data.likeArr[i]}`
                button.appendChild(icon)

                boardHigh.appendChild(span1)
                boardHigh.appendChild(span2)

                boardMid.appendChild(img)
                boardMid.appendChild(span4)
                boardMid.appendChild(span3)

                boardBottom.appendChild(span6)
                boardBottom.appendChild(button)

                div.appendChild(boardHigh)
                div.appendChild(boardMid)
                div.appendChild(span5)
                div.appendChild(boardBottom)

                const main = document.querySelector('.board-main')
                main.appendChild(div)
            }
        })
    }

    const modal2 = document.getElementById("modal")
    const btnModal = document.getElementById("btn-modal")
    btnModal.addEventListener("click", e => {
        if (subjectIs== false) {
            alert("게시판을 선택해주세요!")
            return;
        }
        modal2.style.display = "flex"
        })
    modal2.addEventListener("click", e => {
    const evTarget = e.target
    if(evTarget.classList.contains("modal-overlay")) {
        modal2.style.display = "none"
        const form = document.forms['board-write']
        form.reset()
    }})

       const Editor = toastui.Editor;
       const editor = new Editor({
               el: document.querySelector('#editor'),
               height : '500px',
               initialEditType: 'markdown',
               previewStyle: 'vertical'
           });

           function format(text) {
                let html = new DOMParser();
                html = html.parseFromString(text, 'text/html');
                console.log(html.children[0].children[1].children)

                return html.children[0].children[1].children;
            }
        function Allboard() {
            window.location.reload()
        }
        let div = document.createElement('div');
      let smallDiv = document.createElement('div');
      div.style.cssText = `
                  width: 42px;
                  height: 45px;
                  color: black;
                  box-sizing: border-box;
                  display: flex;
                  text-align: center;
                  justify-content: center;
                  align-items: center;
              `;
      smallDiv.style.cssText = `
                  width: 32px;
                  height: 32px;
                  color: black;
                  box-sizing: border-box;
                  display: flex;
                  text-align: center;
                  justify-content: center;
                  align-items: center;
              `;

      div.classList.add('toast-editor-toolbar-group');
      smallDiv.innerHTML = `<i class="fa-solid fa-location-dot" style="font-size: 20px; color: #333"></i>`;
      smallDiv.classList.add('for');
      smallDiv.onclick = () => {
        showSearchPlaces();
      };
      div.appendChild(smallDiv);
      //   div.onclick = showSearchPlaces();

      smallDiv.addEventListener('mouseenter', () => {
        smallDiv.innerHTML += `<div class="toastui-editor-tooltip" style="display: block; top: 45px;">
            <div class="arrow"></div>
            <span class="text">Map</span>
          </div>`;
      });
      smallDiv.addEventListener('mouseleave', () => {
        smallDiv.innerHTML = space;
      });
      document
        .querySelector('.toastui-editor-defaultUI-toolbar')
        .insertBefore(
          div,
          document.querySelector('.toastui-editor-defaultUI-toolbar')
            .firstChild,
        );
      let space = smallDiv.innerHTML;   
</script>
</html>